[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule & Materials",
    "section": "",
    "text": "Week\nDate\nTopic\nSlides\nOther Materials\n\n\n\n\n1\n25/10/2023\nWelcome and introduction\nslides\n\n\n\nN/A\n01/11/2023\nNo workshop (public holiday)\n\n\n\n\n2\n08/11/2023\nBasic data exploration and data viz\nworkshop slides \\ installing R\nlive coding output \\ source\n\n\n3\n15/11/2023\nData exploration part 2\nslides\nlive coding template \\ live coding output \\ source\n\n\n4\n22/11/2023\nData exploration practice (and wk 3 catch up)\nN/A\nlive coding output \\ source \\ week 4 exercises\n\n\n5\n29/11/2023\nImporting and tidying data\n\n\n\n\n6\n06/12/2023\nWorking with text (“strings”)"
  },
  {
    "objectID": "schedule.html#resources",
    "href": "schedule.html#resources",
    "title": "Schedule & Materials",
    "section": "Resources",
    "text": "Resources\nAny other resources required will be made available here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Science",
    "section": "",
    "text": "Welcome to the Introduction to Data Science course at the University of Cologne, WS 2023/2024!\nInstructor: Prof. Ina Bornkessel-Schlesewsky (University of South Australia; Global Faculty member, University of Cologne)"
  },
  {
    "objectID": "code/session3_live.html",
    "href": "code/session3_live.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/session3_live.html#discussion-of-week-2-exercises",
    "href": "code/session3_live.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises"
  },
  {
    "objectID": "code/session3_live.html#r-basics",
    "href": "code/session3_live.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\nExample of a more complex object name\nExample of a function: seq()\nBe careful with brackets and quotation marks"
  },
  {
    "objectID": "code/session3_live.html#a-little-more-on-data-manipulation",
    "href": "code/session3_live.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\nAdditional ways to summarise\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\nTo look at the number of observations in a group use count()"
  },
  {
    "objectID": "code/session3_live.html#plotting",
    "href": "code/session3_live.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example:\n\n\nAdd title and axis labels\nAdding a meaningful title and axis labels makes your plot more informative and readable."
  },
  {
    "objectID": "code/session3_live.html#plotting-a-categorical-predictor-of-a-continuous-variable",
    "href": "code/session3_live.html#plotting-a-categorical-predictor-of-a-continuous-variable",
    "title": "Data science session 3",
    "section": "Plotting a categorical predictor of a continuous variable",
    "text": "Plotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\ngeom_jitter() produces a better result:"
  },
  {
    "objectID": "code/session3_live.html#bar-column-graphs-to-plot-quantities",
    "href": "code/session3_live.html#bar-column-graphs-to-plot-quantities",
    "title": "Data science session 3",
    "section": "Bar / column graphs to plot quantities",
    "text": "Bar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?"
  },
  {
    "objectID": "code/session3_live.html#line-graphs-to-plot-changes-over-time",
    "href": "code/session3_live.html#line-graphs-to-plot-changes-over-time",
    "title": "Data science session 3",
    "section": "Line graphs to plot changes over time",
    "text": "Line graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\nAdding groups, e.g. to look at the number of sightings per year for each species:"
  },
  {
    "objectID": "code/session3_live.html#histograms-to-examine-distributions",
    "href": "code/session3_live.html#histograms-to-examine-distributions",
    "title": "Data science session 3",
    "section": "Histograms to examine distributions",
    "text": "Histograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\nPair a histogram with facets to look at groups:"
  },
  {
    "objectID": "code/session3_live.html#boxplots-to-examine-distributions",
    "href": "code/session3_live.html#boxplots-to-examine-distributions",
    "title": "Data science session 3",
    "section": "Boxplots to examine distributions",
    "text": "Boxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\nAdd colour fill:"
  },
  {
    "objectID": "code/session3_live.html#gapminder-data",
    "href": "code/session3_live.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nHow has life expectancy in Australia changed over time?\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\nHow did the mean life expectancy per continent change over time?\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html",
    "href": "code/week2_basic_data_exploration_live_coding.html",
    "title": "Data exploration basics",
    "section": "",
    "text": "We start by loading the packages that we will need using the library() command.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#load-packages",
    "href": "code/week2_basic_data_exploration_live_coding.html#load-packages",
    "title": "Data exploration basics",
    "section": "",
    "text": "We start by loading the packages that we will need using the library() command.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#inspect-data",
    "href": "code/week2_basic_data_exploration_live_coding.html#inspect-data",
    "title": "Data exploration basics",
    "section": "Inspect data",
    "text": "Inspect data\nThe easiest way to inspect a data set is to simply type its name.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#basic-data-exploration",
    "href": "code/week2_basic_data_exploration_live_coding.html#basic-data-exploration",
    "title": "Data exploration basics",
    "section": "Basic data exploration",
    "text": "Basic data exploration\n\nFiltering observations\nUse filter() to only keep certain observations according to a criterion that you specify. For example, we might want to focus on Gentoo penguins.\n\npenguins |&gt;\n  filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt;\n  filter(sex == \"female\")\n\n# A tibble: 165 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# ℹ 155 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt; \n  filter(body_mass_g &gt; 4000)\n\n# A tibble: 172 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Dream               39.2          21.1               196        4150\n 7 Adelie  Dream               39.8          19.1               184        4650\n 8 Adelie  Dream               44.1          19.7               196        4400\n 9 Adelie  Dream               39.6          18.8               190        4600\n10 Adelie  Dream               42.3          21.2               191        4150\n# ℹ 162 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nSorting observations\nTo sort by a particular column (e.g. body_mass_g), use arrange(). To sort in descending order add a minus sign (N.B. this works for numeric columns only; for other column types, use desc()).\n\npenguins |&gt; \n  arrange(body_mass_g)\n\n# A tibble: 344 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream              46.9          16.6               192        2700\n 2 Adelie    Biscoe             36.5          16.6               181        2850\n 3 Adelie    Biscoe             36.4          17.1               184        2850\n 4 Adelie    Biscoe             34.5          18.1               187        2900\n 5 Adelie    Dream              33.1          16.1               178        2900\n 6 Adelie    Torgers…           38.6          17                 188        2900\n 7 Chinstrap Dream              43.2          16.6               187        2900\n 8 Adelie    Biscoe             37.9          18.6               193        2925\n 9 Adelie    Dream              37.5          18.9               179        2975\n10 Adelie    Dream              37            16.9               185        3000\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\npenguins |&gt; \n  arrange(-body_mass_g)\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           49.2          15.2               221        6300\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           51.1          16.3               220        6000\n 4 Gentoo  Biscoe           48.8          16.2               222        6000\n 5 Gentoo  Biscoe           45.2          16.4               223        5950\n 6 Gentoo  Biscoe           49.8          15.9               229        5950\n 7 Gentoo  Biscoe           48.4          14.6               213        5850\n 8 Gentoo  Biscoe           49.3          15.7               217        5850\n 9 Gentoo  Biscoe           55.1          16                 230        5850\n10 Gentoo  Biscoe           49.5          16.2               229        5800\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nCombining operations\nUse the pipe (|&gt;) to combine operations, e.g. to filter for female penguins and sort by descending flipper length:\n\n# this is a comment\npenguins |&gt; \n  filter(sex == \"female\") |&gt; \n  arrange(-flipper_length_mm)\n\n# A tibble: 165 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.9          14.6               222        4875\n 2 Gentoo  Biscoe           49.1          14.8               220        5150\n 3 Gentoo  Biscoe           43.5          14.2               220        4700\n 4 Gentoo  Biscoe           45.8          14.2               219        4700\n 5 Gentoo  Biscoe           48.5          15                 219        4850\n 6 Gentoo  Biscoe           43.4          14.4               218        4600\n 7 Gentoo  Biscoe           47.5          15                 218        4950\n 8 Gentoo  Biscoe           43.6          13.9               217        4900\n 9 Gentoo  Biscoe           46.5          14.4               217        4900\n10 Gentoo  Biscoe           46.5          14.8               217        5200\n# ℹ 155 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt; \n  filter(species == \"Chinstrap\") |&gt; \n  arrange(-body_mass_g)\n\n# A tibble: 68 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream            52            20.7               210        4800\n 2 Chinstrap Dream            52.8          20                 205        4550\n 3 Chinstrap Dream            53.5          19.9               205        4500\n 4 Chinstrap Dream            50.8          18.5               201        4450\n 5 Chinstrap Dream            49.2          18.2               195        4400\n 6 Chinstrap Dream            54.2          20.8               201        4300\n 7 Chinstrap Dream            49            19.6               212        4300\n 8 Chinstrap Dream            46            18.9               195        4150\n 9 Chinstrap Dream            52            19                 197        4150\n10 Chinstrap Dream            51            18.8               203        4100\n# ℹ 58 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nCompute summary statistics\nCompute summary statistics using summarise(). Start by calculating the mean. We need to add na.rm=TRUE here to tell R to remove missing values.\nThis is a good example of how R operates. It won’t make assumptions for you about what you want to do, for example how to handle missing values. If you want these excluded from your data when calculating the mean, you will need to specify this.\n\npenguins |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_body_mass\n           &lt;dbl&gt;\n1          4202.\n\n\nCalculate mean and standard deviation\n\npenguins |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  mean_body_mass sd_body_mass\n           &lt;dbl&gt;        &lt;dbl&gt;\n1          4202.         802.\n\n\nLook at mean and sd for Gentoos only:\n\npenguins |&gt; \n  filter(species == \"Gentoo\") |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  mean_body_mass sd_body_mass\n           &lt;dbl&gt;        &lt;dbl&gt;\n1          5076.         504.\n\n\n\n\nCompute summary statistics by group\nNote: this was not covered in the week 2 workshop due to time constraints and will be discussed in week 3.\nUse group_by() to create groups which are then applied in the next command, e.g. to compute mean and sd."
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#basic-visualisation",
    "href": "code/week2_basic_data_exploration_live_coding.html#basic-visualisation",
    "title": "Data exploration basics",
    "section": "Basic visualisation",
    "text": "Basic visualisation\nCreate a scatterplot with flipper length as a predictor of body mass. To do so, we pipe the penguins data to the ggplot() function. This function requires us to specify aesthetics (via aes()); these make clear how to map parts of the data onto components of the graph.\nIn a simple case, e.g. for a basic scatterplot, you will need to specify which variable to map onto the x-axis of the plot and which variable to map onto the y-axis.\nYou will also need to add one or more “geoms” (i.e. geometric objects). These specify the type of plot; e.g. geom_point() creates a scatterplot.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n\n\n\n\nCreate the same type of plot but using bill length:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point()\n\n\n\n\nCreate a scatterplot using colour to differentiate between groups (e.g. different species of penguin):\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm, \n             colour = species)) +\n  geom_point()\n\n\n\n\nNote: the content below was not covered in the week 2 session due to time constraints and will be discussed in week 3.\nA different way to compare groups is to separate the plot into different facets.\nYou can also combine the two grouping methods, e.g to look at the role of both species and sex:"
  },
  {
    "objectID": "code/week4_live.html",
    "href": "code/week4_live.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/week4_live.html#discussion-of-week-2-exercises",
    "href": "code/week4_live.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises\n\nSelect\nSelect allows us to select particular columns. Use a minus sign to deselect columns.\n\npenguins |&gt; \n  select(species,sex,island)\n\n# A tibble: 344 × 3\n   species sex    island   \n   &lt;fct&gt;   &lt;fct&gt;  &lt;fct&gt;    \n 1 Adelie  male   Torgersen\n 2 Adelie  female Torgersen\n 3 Adelie  female Torgersen\n 4 Adelie  &lt;NA&gt;   Torgersen\n 5 Adelie  female Torgersen\n 6 Adelie  male   Torgersen\n 7 Adelie  female Torgersen\n 8 Adelie  male   Torgersen\n 9 Adelie  &lt;NA&gt;   Torgersen\n10 Adelie  &lt;NA&gt;   Torgersen\n# ℹ 334 more rows\n\npenguins |&gt; \n  select(-year)\n\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 1 more variable: sex &lt;fct&gt;\n\n\n\n\nMutate\nMutate creates new columns, most typically based on existing ones.\n\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\nSize aesthetic\nThe size aesthetic maps a variable onto different sizes.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, \n             size = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nUse of size not as an aesthetic but to change the size of all points.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 5)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 2)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSimilar use of colour not as an aesthetic but to set a uniform colour:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(colour = \"steelblue\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAesthetics can also be set just for individual geoms, as below. In this case, they will apply only to the geom in question, not to the entire plot (as when they are specified directly as an argument of ggplot()). We will return to this when we look at combining different geoms later in the course.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(colour = species))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "code/week4_live.html#r-basics",
    "href": "code/week4_live.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\n\na &lt;-  1 + 2\nb &lt;-  3 + 4\nc &lt;- \"a text object\"\n\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\n\na + b\n\n[1] 10\n\n# can't add b and c because c is a string\n# b + c\n\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\n\n(d &lt;- a - b)\n\n[1] -4\n\n\nExample of a more complex object name\n\nthis_is_a_really_long_name &lt;- 2.5\n\nthis_is_too &lt;-  3.5\n\nExample of a function: seq()\n\nseq(1,10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1,100, by = 10)\n\n [1]  1 11 21 31 41 51 61 71 81 91\n\n\nBe careful with brackets and quotation marks\n\n# x &lt;- \"hello world\n\n# seq(1,10"
  },
  {
    "objectID": "code/week4_live.html#a-little-more-on-data-manipulation",
    "href": "code/week4_live.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\n\nadelies &lt;- penguins |&gt; \n  filter(species == \"Adelie\")\n\nadelies\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nAdditional ways to summarise\n\npenguins |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  median_body_mass\n             &lt;dbl&gt;\n1             4050\n\n\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   median_body_mass\n  &lt;fct&gt;                &lt;dbl&gt;\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5000\n\n\nTo look at the number of observations in a group use count()\n\npenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\npenguins |&gt; \n  count(species,island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\nAdditional ways to inspect data\nThe easiest way to inspect a data set is to type its name\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nThe functions head() and tail() display the first few and last few rows, respectively.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nhead(penguins, n=15)\n\n# A tibble: 15 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n11 Adelie  Torgersen           37.8          17.1               186        3300\n12 Adelie  Torgersen           37.8          17.3               180        3700\n13 Adelie  Torgersen           41.1          17.6               182        3200\n14 Adelie  Torgersen           38.6          21.2               191        3800\n15 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\ntail(penguins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nglimpse() shows the columns in a horizontal layout\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "code/week4_live.html#plotting",
    "href": "code/week4_live.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example, which also shows how to add title and axis labels. Adding a meaningful title and axis labels makes your plot more informative and readable.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point() +\n  labs(\n    title = \"Body mass as a function of flipper length\",\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\"\n  )\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nPlotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\ngeom_jitter() produces a better result:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nBar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm=TRUE)) |&gt; \n  ggplot(aes(x = species, y = mean_body_mass)) +\n  geom_col()\n\n\n\n\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_col()\n\nWarning: Removed 2 rows containing missing values (`position_stack()`).\n\n\n\n\n\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?\n\n\nLine graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\n\npenguins |&gt; \n  count(year) |&gt; \n  ggplot(aes(x = year, y = n)) +\n  geom_line() +\n  geom_point() \n\n\n\n\nAdding groups, e.g. to look at the number of sightings per year for each species:\n\npenguins |&gt; \n  count(year, species) |&gt; \n  ggplot(aes(x = year, y = n, colour = species)) +\n  geom_line() +\n  geom_point()\n\n\n\n\nSelecting aesthetics for one geom only:\n\npenguins |&gt; \n  count(year, species) |&gt; \n  ggplot(aes(x = year, y = n)) +\n    geom_point() +\n    geom_line(aes(colour = species))\n\n\n\n\n\n\nHistograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\n\npenguins |&gt; \n  ggplot(aes(x = bill_depth_mm)) +\n  geom_histogram(binwidth = 0.5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nPair a histogram with facets to look at groups:\n\npenguins |&gt; \n  ggplot(aes(x = bill_depth_mm)) +\n  geom_histogram(bindwidth = 0.5) +\n  facet_wrap(~species)\n\nWarning in geom_histogram(bindwidth = 0.5): Ignoring unknown parameters:\n`bindwidth`\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\nBoxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\n\npenguins |&gt; \n  ggplot(aes(x = species, y = bill_depth_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nAdd colour fill:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = bill_depth_mm, fill = sex)) +\n  geom_boxplot(outlier.shape = 3, alpha = 0.5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "code/week4_live.html#gapminder-data",
    "href": "code/week4_live.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\n\nHow has life expectancy in Germany changed over time?\n\n\ngapminder |&gt; \n  filter(country == \"Germany\") |&gt; \n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\n\nStart by looking at 1952:\n\ngapminder |&gt; \n  filter(year == 1952) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\nIdentify the outlier:\n\ngapminder |&gt; \n  filter(year == 1952, gdpPercap &gt; 90000)\n\n# A tibble: 1 × 6\n  country continent  year lifeExp    pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt;     &lt;dbl&gt;\n1 Kuwait  Asia       1952    55.6 160000   108382.\n\n\nRemove the outlier:\n\ngapminder |&gt; \n  filter(year == 1952, gdpPercap &lt; 90000) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()\n\n\n\n\nNote that even after removing the outlier, there were still many datapoints “squashed together” close to 0, suggesting that there is a disparity of scale in regard to gdpPercap (i.e. the values of this variable for different countries are on different orders of magnitude). We have addressed this using a log scale (via the addition of scale_x_log10()).\nWe did not look at 2007 in the workshop on account of time constraints. However, the approach to do this would be parallel to the above.\n\nHow did the mean life expectancy per continent change over time?\n\n\ngapminder |&gt; \n  group_by(continent, year) |&gt; \n  summarise(mean_lifeExp = mean(lifeExp, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = year, y = mean_lifeExp, colour = continent)) +\n  geom_line()\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\n\n\n\nThe below question was not examined in the workshop due to time constraints.\n\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/session3_live_complete.html",
    "href": "code/session3_live_complete.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/session3_live_complete.html#discussion-of-week-2-exercises",
    "href": "code/session3_live_complete.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises\n\nSelect\nSelect allows us to select particular columns. Use a minus sign to deselect columns.\n\npenguins |&gt; \n  select(species,sex,island)\n\n# A tibble: 344 × 3\n   species sex    island   \n   &lt;fct&gt;   &lt;fct&gt;  &lt;fct&gt;    \n 1 Adelie  male   Torgersen\n 2 Adelie  female Torgersen\n 3 Adelie  female Torgersen\n 4 Adelie  &lt;NA&gt;   Torgersen\n 5 Adelie  female Torgersen\n 6 Adelie  male   Torgersen\n 7 Adelie  female Torgersen\n 8 Adelie  male   Torgersen\n 9 Adelie  &lt;NA&gt;   Torgersen\n10 Adelie  &lt;NA&gt;   Torgersen\n# ℹ 334 more rows\n\npenguins |&gt; \n  select(-year)\n\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 1 more variable: sex &lt;fct&gt;\n\n\n\n\nMutate\nMutate creates new columns, most typically based on existing ones.\n\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\nSize aesthetic\nThe size aesthetic maps a variable onto different sizes.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, \n             size = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nUse of size not as an aesthetic but to change the size of all points.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 5)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 2)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSimilar use of colour not as an aesthetic but to set a uniform colour:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(colour = \"steelblue\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAesthetics can also be set just for individual geoms, as below. In this case, they will apply only to the geom in question, not to the entire plot (as when they are specified directly as an argument of ggplot()). We will return to this when we look at combining different geoms later in the course.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(colour = species))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "code/session3_live_complete.html#r-basics",
    "href": "code/session3_live_complete.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\n\na &lt;-  1 + 2\nb &lt;-  3 + 4\nc &lt;- \"a text object\"\n\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\n\na + b\n\n[1] 10\n\n# can't add b and c because c is a string\n# b + c\n\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\n\n(d &lt;- a - b)\n\n[1] -4\n\n\nExample of a more complex object name\n\nthis_is_a_really_long_name &lt;- 2.5\n\nthis_is_too &lt;-  3.5\n\nExample of a function: seq()\n\nseq(1,10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1,100, by = 10)\n\n [1]  1 11 21 31 41 51 61 71 81 91\n\n\nBe careful with brackets and quotation marks\n\n# x &lt;- \"hello world\n\n# seq(1,10"
  },
  {
    "objectID": "code/session3_live_complete.html#a-little-more-on-data-manipulation",
    "href": "code/session3_live_complete.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\n\nadelies &lt;- penguins |&gt; \n  filter(species == \"Adelie\")\n\nadelies\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nAdditional ways to summarise\n\npenguins |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  median_body_mass\n             &lt;dbl&gt;\n1             4050\n\n\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   median_body_mass\n  &lt;fct&gt;                &lt;dbl&gt;\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5000\n\n\nTo look at the number of observations in a group use count()\n\npenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\npenguins |&gt; \n  count(species,island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\nAdditional ways to inspect data\nThe easiest way to inspect a data set is to type its name\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nThe functions head() and tail() display the first few and last few rows, respectively.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nhead(penguins, n=15)\n\n# A tibble: 15 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n11 Adelie  Torgersen           37.8          17.1               186        3300\n12 Adelie  Torgersen           37.8          17.3               180        3700\n13 Adelie  Torgersen           41.1          17.6               182        3200\n14 Adelie  Torgersen           38.6          21.2               191        3800\n15 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\ntail(penguins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nglimpse() shows the columns in a horizontal layout\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "code/session3_live_complete.html#plotting",
    "href": "code/session3_live_complete.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example, which also shows how to add title and axis labels. Adding a meaningful title and axis labels makes your plot more informative and readable.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point() +\n  labs(\n    title = \"Body mass as a function of flipper length\",\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\"\n  )\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nPlotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\ngeom_jitter() produces a better result:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nBar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm=TRUE)) |&gt; \n  ggplot(aes(x = species, y = mean_body_mass)) +\n  geom_col()\n\n\n\n\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_col()\n\nWarning: Removed 2 rows containing missing values (`position_stack()`).\n\n\n\n\n\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?\nThe content below was not discussed during the week 3 workshop due to time constraints. It will be covered next week.\n\n\nLine graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\nAdding groups, e.g. to look at the number of sightings per year for each species:\n\n\nHistograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\nPair a histogram with facets to look at groups:\n\n\nBoxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\nAdd colour fill:"
  },
  {
    "objectID": "code/session3_live_complete.html#gapminder-data",
    "href": "code/session3_live_complete.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nHow has life expectancy in Australia changed over time?\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\nHow did the mean life expectancy per continent change over time?\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html",
    "href": "code/session4_himalayan_expeditions.html",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "",
    "text": "For our week 4 workshop, we will draw on a new data set, thus giving you the opportunity to practise and consolidate what we have covered over the past few weeks. The data set is on Himalayan climbing expeditions and it is drawn from a “Tidy Tuesday” challenge from 2020. #TidyTuesday is a “weekly social data project”, as a part of which participants around the world practice their data science skills in R by applying them to a new data set each week. See the Tidy Tuesday website and repository for further details.\nIn the week 4 workshop, we will first go through how to load the data set. You will then have time to explore the questions below. For each question, please provide a brief answer as well as the code that you used to get to your answer. When creating plots, add appropriate titles and axis labels.\nPlease upload the completed (and rendered) document in fulfilment of your week 4 exercises."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#background",
    "href": "code/session4_himalayan_expeditions.html#background",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "",
    "text": "For our week 4 workshop, we will draw on a new data set, thus giving you the opportunity to practise and consolidate what we have covered over the past few weeks. The data set is on Himalayan climbing expeditions and it is drawn from a “Tidy Tuesday” challenge from 2020. #TidyTuesday is a “weekly social data project”, as a part of which participants around the world practice their data science skills in R by applying them to a new data set each week. See the Tidy Tuesday website and repository for further details.\nIn the week 4 workshop, we will first go through how to load the data set. You will then have time to explore the questions below. For each question, please provide a brief answer as well as the code that you used to get to your answer. When creating plots, add appropriate titles and axis labels.\nPlease upload the completed (and rendered) document in fulfilment of your week 4 exercises."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#load-packages",
    "href": "code/session4_himalayan_expeditions.html#load-packages",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#load-data-on-himalayan-climbing-expeditions",
    "href": "code/session4_himalayan_expeditions.html#load-data-on-himalayan-climbing-expeditions",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Load data on Himalayan climbing expeditions",
    "text": "Load data on Himalayan climbing expeditions\nDon’t worry about the details of the below code for now. In brief, it uses the function read_csv() to read in some data from files that have been made available on the Tidytuesday website. We will see how to read in our own data in week 5.\n\nmembers &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/members.csv')\n\nRows: 76519 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): expedition_id, member_id, peak_id, peak_name, season, sex, citizen...\ndbl  (5): year, age, highpoint_metres, death_height_metres, injury_height_me...\nlgl  (6): hired, success, solo, oxygen_used, died, injured\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nexpeditions &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/expeditions.csv')\n\nRows: 10364 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): expedition_id, peak_id, peak_name, season, termination_reason, tre...\ndbl  (6): year, highpoint_metres, members, member_deaths, hired_staff, hired...\nlgl  (1): oxygen_used\ndate (3): basecamp_date, highpoint_date, termination_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npeaks &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/peaks.csv')\n\nRows: 468 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): peak_id, peak_name, peak_alternative_name, climbing_status, first_a...\ndbl (2): height_metres, first_ascent_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#basic-exploration-of-peaks-and-their-climbing-status",
    "href": "code/session4_himalayan_expeditions.html#basic-exploration-of-peaks-and-their-climbing-status",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Basic exploration of peaks and their climbing status",
    "text": "Basic exploration of peaks and their climbing status\nWe start by using the peaks data.\n\nPlot a histogram of the height of the Himalayan peaks in the data set. Remember to adjust the binwidth parameter. Which value did you choose and why? Within which range of heights (roughly) do we find the most peaks?\nHow many peaks in the data set have been climbed and how many haven’t?\nDoes the distribution of heights differ between the peaks that have been climbed and those that haven’t? Use an appropriate visualisation to address this question.\nHow did the number of first ascents change over time? Use a line graph to chart the number of first ascents from year to year. (Hint: the first time you do this, you will likely see a very strange-looking graph. Use the summary() function to have a look at the values of first_ascent_year and have a think about how you could fix the problem that you encounter before replotting.)\n\nWhich country (or countries) has/have recorded the highest number of first ascents?\n\n\n\nTo get rid of the missing values in the data frame that your response to a. likely produced, use filter(!is.na(first_ascent_country)) in addition to the other computations that you undertook. Save the resulting data frame as a new object.\nUse your newly created data frame from b to visualise the number of first ascents per country for all countries with at least 10 first ascents. Do this using a column graph.\nTry flipping your column graph from c to a horizontal layout by switching what you put on the x and y axes.\nOne final modification: you can sort the columns to be ordered from high to low (for horizontal bars) by using reorder(first_ascent_country,n). Try plugging this into your y-axis aesthetic! If you want the reverse order, use -n instead."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#expeditions",
    "href": "code/session4_himalayan_expeditions.html#expeditions",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Expeditions",
    "text": "Expeditions\nLet’s now look more closely at expeditions by using the expeditions data.\n\nHow deadly are individual peaks?\nThe columns member_deaths and hired_staff_deaths encode the number of deaths (if any) per expedition.\n\n\nTo look at how deadly individual peaks are, first create a new column which encodes the total number of deaths per expedition, then compute a summary statistic for the overall number of deaths per mountain. (Hint: there is a function called sum() that you can apply in the same way as mean(), sd() etc.). Sort in descending order of deaths and save as a new object. Which mountain is the deadliest according to your calculations?\n\n\n\nUse the new data frame created in a. to plot a horizontal column graph of the top 10 deadly mountains. As for question 5, sort the columns so that the deadliest mountain is at the top.\n\n\n\nWhich season has the highest likelihood of success? (optional)\n\nUse a boxplot to compare the highpoint reached by expeditions per season. Filter out the “unhelpful” values (you will know which ones I mean when you create the basic plot). Note that you can use filter() to only keep rows that are not equal to a particular value by using != rather than ==, so to eliminate the value “red” from a column called “colour”, for example, you could use filter(colour != \"red\"). Based on this graph, which season would you choose if you were opting for a Himalayan climbing expedition?\n\nExamine the top reasons for expedition termination by looking at the termination_reason column. (Hint: count will be very useful here …)\n\n\n\nDrawing on your answer to a, isolate the number of expeditions that were terminated because they succeeded in climbing the main peak and count how many of these there were per season and year. (Consider restricting the range of years that you look at to make the graph a bit clearer.) What patterns can you see?"
  },
  {
    "objectID": "licence.html",
    "href": "licence.html",
    "title": "Licence & Acknowledgements",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution Share Alike 4.0 International licence."
  },
  {
    "objectID": "licence.html#licence",
    "href": "licence.html#licence",
    "title": "Licence & Acknowledgements",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution Share Alike 4.0 International licence."
  },
  {
    "objectID": "licence.html#acknowledgements",
    "href": "licence.html#acknowledgements",
    "title": "Licence & Acknowledgements",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nSome materials are adapted from:\n\nData Science in a Box by Mine Çetinkaya-Rundel (github repo) under a Creative Commons Attribution Share Alike 4.0 International licence\na blogpost by Cédric Scherer under a Creative Commons Attribution 4.0 International licence.\n\nOthers draw on R for Data Science (2nd ed.) by Hadley Wickham, Mine Çetinkaya-Rundel and Garrett Grolemund.\nSee individual files for details."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the course",
    "section": "",
    "text": "This course will allow students to develop critical skills in analysing and drawing inferences from data using contemporary open-source computational tools. It will further introduce students to principles of open and reproducible science and thereby the ethical handling of data. These skills are crucial for quantitative research across a wide range of disciplines. They are also highly transferable across different domains and types of data, thus offering students a foundation for lifelong learning and problem solving, as well as potential applications in a range of different professions.\nYou will be introduced to coding in R, an open-source programming language for statistical computing, during this workshop. After introducing basic concepts of data exploration and visualisation within a reproducible workflow, the course will touch on more advanced aspects of data “wrangling” including working with text.\nTextbook: Wickham, Çetinkaya-Rundel, and Grolemund (2023) – freely available online here\nPrerequisites: None. Please bring a laptop.\n\n\n\n\nReferences\n\nWickham, Hadley, Mina Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2nd ed. O’Reilly Media, Inc. https://www.oreilly.com/library/view/r-for-data/9781492097396/."
  }
]