[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule & Materials",
    "section": "",
    "text": "Week\nDate\nTopic\nSlides\nOther Materials\n\n\n\n\n1\n25/10/2023\nWelcome and introduction\nslides\n\n\n\nN/A\n01/11/2023\nNo workshop (public holiday)\n\n\n\n\n2\n08/11/2023\nBasic data exploration and data viz\nworkshop slides \\ installing R\nlive coding output \\ source\n\n\n3\n15/11/2023\nData exploration part 2\nslides\nlive coding template \\ live coding output \\ source\n\n\n4\n22/11/2023\nData exploration practice (and wk 3 catch up)\nN/A\nlive coding output \\ source \\ week 4 exercises\n\n\n5\n29/11/2023\nImporting and tidying data\nslides - importing \\ slides - tidying\nstudent_teacher_ratios.csv \\ live coding output \\ source\n\n\n6\n06/12/2023\nTidying ctd. / Next steps\nslides - next steps\nprimary_school_completion.csv \\ ratio_of_girls_to_boys_in_primary_and_secondary_education_perc.csv \\ live coding output \\ source"
  },
  {
    "objectID": "schedule.html#resources",
    "href": "schedule.html#resources",
    "title": "Schedule & Materials",
    "section": "Resources",
    "text": "Resources\nAny other resources required will be made available here."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Data Science",
    "section": "",
    "text": "Welcome to the Introduction to Data Science course at the University of Cologne, WS 2023/2024!\nInstructor: Prof. Ina Bornkessel-Schlesewsky (University of South Australia; Global Faculty member, University of Cologne)"
  },
  {
    "objectID": "code/session3_live.html",
    "href": "code/session3_live.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/session3_live.html#discussion-of-week-2-exercises",
    "href": "code/session3_live.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises"
  },
  {
    "objectID": "code/session3_live.html#r-basics",
    "href": "code/session3_live.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\nExample of a more complex object name\nExample of a function: seq()\nBe careful with brackets and quotation marks"
  },
  {
    "objectID": "code/session3_live.html#a-little-more-on-data-manipulation",
    "href": "code/session3_live.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\nAdditional ways to summarise\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\nTo look at the number of observations in a group use count()"
  },
  {
    "objectID": "code/session3_live.html#plotting",
    "href": "code/session3_live.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example:\n\n\nAdd title and axis labels\nAdding a meaningful title and axis labels makes your plot more informative and readable."
  },
  {
    "objectID": "code/session3_live.html#plotting-a-categorical-predictor-of-a-continuous-variable",
    "href": "code/session3_live.html#plotting-a-categorical-predictor-of-a-continuous-variable",
    "title": "Data science session 3",
    "section": "Plotting a categorical predictor of a continuous variable",
    "text": "Plotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\ngeom_jitter() produces a better result:"
  },
  {
    "objectID": "code/session3_live.html#bar-column-graphs-to-plot-quantities",
    "href": "code/session3_live.html#bar-column-graphs-to-plot-quantities",
    "title": "Data science session 3",
    "section": "Bar / column graphs to plot quantities",
    "text": "Bar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?"
  },
  {
    "objectID": "code/session3_live.html#line-graphs-to-plot-changes-over-time",
    "href": "code/session3_live.html#line-graphs-to-plot-changes-over-time",
    "title": "Data science session 3",
    "section": "Line graphs to plot changes over time",
    "text": "Line graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\nAdding groups, e.g. to look at the number of sightings per year for each species:"
  },
  {
    "objectID": "code/session3_live.html#histograms-to-examine-distributions",
    "href": "code/session3_live.html#histograms-to-examine-distributions",
    "title": "Data science session 3",
    "section": "Histograms to examine distributions",
    "text": "Histograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\nPair a histogram with facets to look at groups:"
  },
  {
    "objectID": "code/session3_live.html#boxplots-to-examine-distributions",
    "href": "code/session3_live.html#boxplots-to-examine-distributions",
    "title": "Data science session 3",
    "section": "Boxplots to examine distributions",
    "text": "Boxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\nAdd colour fill:"
  },
  {
    "objectID": "code/session3_live.html#gapminder-data",
    "href": "code/session3_live.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nHow has life expectancy in Australia changed over time?\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\nHow did the mean life expectancy per continent change over time?\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html",
    "href": "code/week2_basic_data_exploration_live_coding.html",
    "title": "Data exploration basics",
    "section": "",
    "text": "We start by loading the packages that we will need using the library() command.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#load-packages",
    "href": "code/week2_basic_data_exploration_live_coding.html#load-packages",
    "title": "Data exploration basics",
    "section": "",
    "text": "We start by loading the packages that we will need using the library() command.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#inspect-data",
    "href": "code/week2_basic_data_exploration_live_coding.html#inspect-data",
    "title": "Data exploration basics",
    "section": "Inspect data",
    "text": "Inspect data\nThe easiest way to inspect a data set is to simply type its name.\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#basic-data-exploration",
    "href": "code/week2_basic_data_exploration_live_coding.html#basic-data-exploration",
    "title": "Data exploration basics",
    "section": "Basic data exploration",
    "text": "Basic data exploration\n\nFiltering observations\nUse filter() to only keep certain observations according to a criterion that you specify. For example, we might want to focus on Gentoo penguins.\n\npenguins |&gt;\n  filter(species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt;\n  filter(sex == \"female\")\n\n# A tibble: 165 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# ℹ 155 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt; \n  filter(body_mass_g &gt; 4000)\n\n# A tibble: 172 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.2          19.6               195        4675\n 2 Adelie  Torgersen           42            20.2               190        4250\n 3 Adelie  Torgersen           34.6          21.1               198        4400\n 4 Adelie  Torgersen           42.5          20.7               197        4500\n 5 Adelie  Torgersen           46            21.5               194        4200\n 6 Adelie  Dream               39.2          21.1               196        4150\n 7 Adelie  Dream               39.8          19.1               184        4650\n 8 Adelie  Dream               44.1          19.7               196        4400\n 9 Adelie  Dream               39.6          18.8               190        4600\n10 Adelie  Dream               42.3          21.2               191        4150\n# ℹ 162 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nSorting observations\nTo sort by a particular column (e.g. body_mass_g), use arrange(). To sort in descending order add a minus sign (N.B. this works for numeric columns only; for other column types, use desc()).\n\npenguins |&gt; \n  arrange(body_mass_g)\n\n# A tibble: 344 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream              46.9          16.6               192        2700\n 2 Adelie    Biscoe             36.5          16.6               181        2850\n 3 Adelie    Biscoe             36.4          17.1               184        2850\n 4 Adelie    Biscoe             34.5          18.1               187        2900\n 5 Adelie    Dream              33.1          16.1               178        2900\n 6 Adelie    Torgers…           38.6          17                 188        2900\n 7 Chinstrap Dream              43.2          16.6               187        2900\n 8 Adelie    Biscoe             37.9          18.6               193        2925\n 9 Adelie    Dream              37.5          18.9               179        2975\n10 Adelie    Dream              37            16.9               185        3000\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\npenguins |&gt; \n  arrange(-body_mass_g)\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           49.2          15.2               221        6300\n 2 Gentoo  Biscoe           59.6          17                 230        6050\n 3 Gentoo  Biscoe           51.1          16.3               220        6000\n 4 Gentoo  Biscoe           48.8          16.2               222        6000\n 5 Gentoo  Biscoe           45.2          16.4               223        5950\n 6 Gentoo  Biscoe           49.8          15.9               229        5950\n 7 Gentoo  Biscoe           48.4          14.6               213        5850\n 8 Gentoo  Biscoe           49.3          15.7               217        5850\n 9 Gentoo  Biscoe           55.1          16                 230        5850\n10 Gentoo  Biscoe           49.5          16.2               229        5800\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nCombining operations\nUse the pipe (|&gt;) to combine operations, e.g. to filter for female penguins and sort by descending flipper length:\n\n# this is a comment\npenguins |&gt; \n  filter(sex == \"female\") |&gt; \n  arrange(-flipper_length_mm)\n\n# A tibble: 165 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.9          14.6               222        4875\n 2 Gentoo  Biscoe           49.1          14.8               220        5150\n 3 Gentoo  Biscoe           43.5          14.2               220        4700\n 4 Gentoo  Biscoe           45.8          14.2               219        4700\n 5 Gentoo  Biscoe           48.5          15                 219        4850\n 6 Gentoo  Biscoe           43.4          14.4               218        4600\n 7 Gentoo  Biscoe           47.5          15                 218        4950\n 8 Gentoo  Biscoe           43.6          13.9               217        4900\n 9 Gentoo  Biscoe           46.5          14.4               217        4900\n10 Gentoo  Biscoe           46.5          14.8               217        5200\n# ℹ 155 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\npenguins |&gt; \n  filter(species == \"Chinstrap\") |&gt; \n  arrange(-body_mass_g)\n\n# A tibble: 68 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Chinstrap Dream            52            20.7               210        4800\n 2 Chinstrap Dream            52.8          20                 205        4550\n 3 Chinstrap Dream            53.5          19.9               205        4500\n 4 Chinstrap Dream            50.8          18.5               201        4450\n 5 Chinstrap Dream            49.2          18.2               195        4400\n 6 Chinstrap Dream            54.2          20.8               201        4300\n 7 Chinstrap Dream            49            19.6               212        4300\n 8 Chinstrap Dream            46            18.9               195        4150\n 9 Chinstrap Dream            52            19                 197        4150\n10 Chinstrap Dream            51            18.8               203        4100\n# ℹ 58 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nCompute summary statistics\nCompute summary statistics using summarise(). Start by calculating the mean. We need to add na.rm=TRUE here to tell R to remove missing values.\nThis is a good example of how R operates. It won’t make assumptions for you about what you want to do, for example how to handle missing values. If you want these excluded from your data when calculating the mean, you will need to specify this.\n\npenguins |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  mean_body_mass\n           &lt;dbl&gt;\n1          4202.\n\n\nCalculate mean and standard deviation\n\npenguins |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  mean_body_mass sd_body_mass\n           &lt;dbl&gt;        &lt;dbl&gt;\n1          4202.         802.\n\n\nLook at mean and sd for Gentoos only:\n\npenguins |&gt; \n  filter(species == \"Gentoo\") |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm = TRUE),\n            sd_body_mass = sd(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 2\n  mean_body_mass sd_body_mass\n           &lt;dbl&gt;        &lt;dbl&gt;\n1          5076.         504.\n\n\n\n\nCompute summary statistics by group\nNote: this was not covered in the week 2 workshop due to time constraints and will be discussed in week 3.\nUse group_by() to create groups which are then applied in the next command, e.g. to compute mean and sd."
  },
  {
    "objectID": "code/week2_basic_data_exploration_live_coding.html#basic-visualisation",
    "href": "code/week2_basic_data_exploration_live_coding.html#basic-visualisation",
    "title": "Data exploration basics",
    "section": "Basic visualisation",
    "text": "Basic visualisation\nCreate a scatterplot with flipper length as a predictor of body mass. To do so, we pipe the penguins data to the ggplot() function. This function requires us to specify aesthetics (via aes()); these make clear how to map parts of the data onto components of the graph.\nIn a simple case, e.g. for a basic scatterplot, you will need to specify which variable to map onto the x-axis of the plot and which variable to map onto the y-axis.\nYou will also need to add one or more “geoms” (i.e. geometric objects). These specify the type of plot; e.g. geom_point() creates a scatterplot.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point()\n\n\n\n\nCreate the same type of plot but using bill length:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point()\n\n\n\n\nCreate a scatterplot using colour to differentiate between groups (e.g. different species of penguin):\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm, \n             colour = species)) +\n  geom_point()\n\n\n\n\nNote: the content below was not covered in the week 2 session due to time constraints and will be discussed in week 3.\nA different way to compare groups is to separate the plot into different facets.\nYou can also combine the two grouping methods, e.g to look at the role of both species and sex:"
  },
  {
    "objectID": "code/session3_live_complete.html",
    "href": "code/session3_live_complete.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/session3_live_complete.html#discussion-of-week-2-exercises",
    "href": "code/session3_live_complete.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises\n\nSelect\nSelect allows us to select particular columns. Use a minus sign to deselect columns.\n\npenguins |&gt; \n  select(species,sex,island)\n\n# A tibble: 344 × 3\n   species sex    island   \n   &lt;fct&gt;   &lt;fct&gt;  &lt;fct&gt;    \n 1 Adelie  male   Torgersen\n 2 Adelie  female Torgersen\n 3 Adelie  female Torgersen\n 4 Adelie  &lt;NA&gt;   Torgersen\n 5 Adelie  female Torgersen\n 6 Adelie  male   Torgersen\n 7 Adelie  female Torgersen\n 8 Adelie  male   Torgersen\n 9 Adelie  &lt;NA&gt;   Torgersen\n10 Adelie  &lt;NA&gt;   Torgersen\n# ℹ 334 more rows\n\npenguins |&gt; \n  select(-year)\n\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 1 more variable: sex &lt;fct&gt;\n\n\n\n\nMutate\nMutate creates new columns, most typically based on existing ones.\n\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\nSize aesthetic\nThe size aesthetic maps a variable onto different sizes.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, \n             size = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nUse of size not as an aesthetic but to change the size of all points.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 5)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 2)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSimilar use of colour not as an aesthetic but to set a uniform colour:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(colour = \"steelblue\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAesthetics can also be set just for individual geoms, as below. In this case, they will apply only to the geom in question, not to the entire plot (as when they are specified directly as an argument of ggplot()). We will return to this when we look at combining different geoms later in the course.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(colour = species))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "code/session3_live_complete.html#r-basics",
    "href": "code/session3_live_complete.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\n\na &lt;-  1 + 2\nb &lt;-  3 + 4\nc &lt;- \"a text object\"\n\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\n\na + b\n\n[1] 10\n\n# can't add b and c because c is a string\n# b + c\n\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\n\n(d &lt;- a - b)\n\n[1] -4\n\n\nExample of a more complex object name\n\nthis_is_a_really_long_name &lt;- 2.5\n\nthis_is_too &lt;-  3.5\n\nExample of a function: seq()\n\nseq(1,10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1,100, by = 10)\n\n [1]  1 11 21 31 41 51 61 71 81 91\n\n\nBe careful with brackets and quotation marks\n\n# x &lt;- \"hello world\n\n# seq(1,10"
  },
  {
    "objectID": "code/session3_live_complete.html#a-little-more-on-data-manipulation",
    "href": "code/session3_live_complete.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\n\nadelies &lt;- penguins |&gt; \n  filter(species == \"Adelie\")\n\nadelies\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nAdditional ways to summarise\n\npenguins |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  median_body_mass\n             &lt;dbl&gt;\n1             4050\n\n\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   median_body_mass\n  &lt;fct&gt;                &lt;dbl&gt;\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5000\n\n\nTo look at the number of observations in a group use count()\n\npenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\npenguins |&gt; \n  count(species,island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\nAdditional ways to inspect data\nThe easiest way to inspect a data set is to type its name\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nThe functions head() and tail() display the first few and last few rows, respectively.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nhead(penguins, n=15)\n\n# A tibble: 15 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n11 Adelie  Torgersen           37.8          17.1               186        3300\n12 Adelie  Torgersen           37.8          17.3               180        3700\n13 Adelie  Torgersen           41.1          17.6               182        3200\n14 Adelie  Torgersen           38.6          21.2               191        3800\n15 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\ntail(penguins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nglimpse() shows the columns in a horizontal layout\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "code/session3_live_complete.html#plotting",
    "href": "code/session3_live_complete.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example, which also shows how to add title and axis labels. Adding a meaningful title and axis labels makes your plot more informative and readable.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point() +\n  labs(\n    title = \"Body mass as a function of flipper length\",\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\"\n  )\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nPlotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\ngeom_jitter() produces a better result:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nBar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm=TRUE)) |&gt; \n  ggplot(aes(x = species, y = mean_body_mass)) +\n  geom_col()\n\n\n\n\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_col()\n\nWarning: Removed 2 rows containing missing values (`position_stack()`).\n\n\n\n\n\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?\nThe content below was not discussed during the week 3 workshop due to time constraints. It will be covered next week.\n\n\nLine graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\nAdding groups, e.g. to look at the number of sightings per year for each species:\n\n\nHistograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\nPair a histogram with facets to look at groups:\n\n\nBoxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\nAdd colour fill:"
  },
  {
    "objectID": "code/session3_live_complete.html#gapminder-data",
    "href": "code/session3_live_complete.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nHow has life expectancy in Australia changed over time?\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\nHow did the mean life expectancy per continent change over time?\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/week4_live.html",
    "href": "code/week4_live.html",
    "title": "Data science session 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nlibrary(gapminder)"
  },
  {
    "objectID": "code/week4_live.html#discussion-of-week-2-exercises",
    "href": "code/week4_live.html#discussion-of-week-2-exercises",
    "title": "Data science session 3",
    "section": "Discussion of week 2 exercises",
    "text": "Discussion of week 2 exercises\n\nSelect\nSelect allows us to select particular columns. Use a minus sign to deselect columns.\n\npenguins |&gt; \n  select(species,sex,island)\n\n# A tibble: 344 × 3\n   species sex    island   \n   &lt;fct&gt;   &lt;fct&gt;  &lt;fct&gt;    \n 1 Adelie  male   Torgersen\n 2 Adelie  female Torgersen\n 3 Adelie  female Torgersen\n 4 Adelie  &lt;NA&gt;   Torgersen\n 5 Adelie  female Torgersen\n 6 Adelie  male   Torgersen\n 7 Adelie  female Torgersen\n 8 Adelie  male   Torgersen\n 9 Adelie  &lt;NA&gt;   Torgersen\n10 Adelie  &lt;NA&gt;   Torgersen\n# ℹ 334 more rows\n\npenguins |&gt; \n  select(-year)\n\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 1 more variable: sex &lt;fct&gt;\n\n\n\n\nMutate\nMutate creates new columns, most typically based on existing ones.\n\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\nSize aesthetic\nThe size aesthetic maps a variable onto different sizes.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, \n             size = bill_length_mm)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nUse of size not as an aesthetic but to change the size of all points.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 5)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 2)\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nSimilar use of colour not as an aesthetic but to set a uniform colour:\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(colour = \"steelblue\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nAesthetics can also be set just for individual geoms, as below. In this case, they will apply only to the geom in question, not to the entire plot (as when they are specified directly as an argument of ggplot()). We will return to this when we look at combining different geoms later in the course.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(colour = species))\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "code/week4_live.html#r-basics",
    "href": "code/week4_live.html#r-basics",
    "title": "Data science session 3",
    "section": "R Basics",
    "text": "R Basics\nCreate new objects with the assignment operator &lt;-\n\na &lt;-  1 + 2\nb &lt;-  3 + 4\nc &lt;- \"a text object\"\n\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\n\na + b\n\n[1] 10\n\n# can't add b and c because c is a string\n# b + c\n\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\n\n(d &lt;- a - b)\n\n[1] -4\n\n\nExample of a more complex object name\n\nthis_is_a_really_long_name &lt;- 2.5\n\nthis_is_too &lt;-  3.5\n\nExample of a function: seq()\n\nseq(1,10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nseq(1,100, by = 10)\n\n [1]  1 11 21 31 41 51 61 71 81 91\n\n\nBe careful with brackets and quotation marks\n\n# x &lt;- \"hello world\n\n# seq(1,10"
  },
  {
    "objectID": "code/week4_live.html#a-little-more-on-data-manipulation",
    "href": "code/week4_live.html#a-little-more-on-data-manipulation",
    "title": "Data science session 3",
    "section": "A little more on data manipulation",
    "text": "A little more on data manipulation\nCreate new objects from the penguins data\n\nadelies &lt;- penguins |&gt; \n  filter(species == \"Adelie\")\n\nadelies\n\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nAdditional ways to summarise\n\npenguins |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  median_body_mass\n             &lt;dbl&gt;\n1             4050\n\n\nOther summary functions: median(), min(), max()\nTo look at groups use group_by()\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(median_body_mass = median(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species   median_body_mass\n  &lt;fct&gt;                &lt;dbl&gt;\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5000\n\n\nTo look at the number of observations in a group use count()\n\npenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\npenguins |&gt; \n  count(species,island)\n\n# A tibble: 5 × 3\n  species   island        n\n  &lt;fct&gt;     &lt;fct&gt;     &lt;int&gt;\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n\n\n\n\nAdditional ways to inspect data\nThe easiest way to inspect a data set is to type its name\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nThe functions head() and tail() display the first few and last few rows, respectively.\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nhead(penguins, n=15)\n\n# A tibble: 15 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n11 Adelie  Torgersen           37.8          17.1               186        3300\n12 Adelie  Torgersen           37.8          17.3               180        3700\n13 Adelie  Torgersen           41.1          17.6               182        3200\n14 Adelie  Torgersen           38.6          21.2               191        3800\n15 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\ntail(penguins)\n\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nglimpse() shows the columns in a horizontal layout\n\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "code/week4_live.html#plotting",
    "href": "code/week4_live.html#plotting",
    "title": "Data science session 3",
    "section": "Plotting",
    "text": "Plotting\n\nScatterplots for two continuous variables\nScatterplot example, which also shows how to add title and axis labels. Adding a meaningful title and axis labels makes your plot more informative and readable.\n\npenguins |&gt; \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point() +\n  labs(\n    title = \"Body mass as a function of flipper length\",\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\"\n  )\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nPlotting a categorical predictor of a continuous variable\nWhat about species as a predictor of body mass?\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_point()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\ngeom_jitter() produces a better result:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_jitter()\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nBar / column graphs to plot quantities\nAlternative approach: plot mean body mass by species using a bar / column graph with geom_col():\n\npenguins |&gt; \n  group_by(species) |&gt; \n  summarise(mean_body_mass = mean(body_mass_g, na.rm=TRUE)) |&gt; \n  ggplot(aes(x = species, y = mean_body_mass)) +\n  geom_col()\n\n\n\n\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won’t show what you think:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_col()\n\nWarning: Removed 2 rows containing missing values (`position_stack()`).\n\n\n\n\n\nNote that there is also a geom_bar(). Have a look at the documentation: what is the difference between geom_col() and geom_bar()?\n\n\nLine graphs to plot changes over time\nLine graph to plot the number of sightings per year We first need to count the number of sightings\n\npenguins |&gt; \n  count(year) |&gt; \n  ggplot(aes(x = year, y = n)) +\n  geom_line() +\n  geom_point() \n\n\n\n\nAdding groups, e.g. to look at the number of sightings per year for each species:\n\npenguins |&gt; \n  count(year, species) |&gt; \n  ggplot(aes(x = year, y = n, colour = species)) +\n  geom_line() +\n  geom_point()\n\n\n\n\nSelecting aesthetics for one geom only:\n\npenguins |&gt; \n  count(year, species) |&gt; \n  ggplot(aes(x = year, y = n)) +\n    geom_point() +\n    geom_line(aes(colour = species))\n\n\n\n\n\n\nHistograms to examine distributions\nUse a histogram to look at a distribution (e.g. of bill depth).\n\npenguins |&gt; \n  ggplot(aes(x = bill_depth_mm)) +\n  geom_histogram(binwidth = 0.5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nPair a histogram with facets to look at groups:\n\npenguins |&gt; \n  ggplot(aes(x = bill_depth_mm)) +\n  geom_histogram(bindwidth = 0.5) +\n  facet_wrap(~species)\n\nWarning in geom_histogram(bindwidth = 0.5): Ignoring unknown parameters:\n`bindwidth`\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\n\n\nBoxplots to examine distributions\n\nLine = median\nLower edge of box = 1st quartile\nUpper edge of box = 3rd quartile\nWhiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\nData points beyond the whiskers are deemed outliers and plotted individually\n\n\npenguins |&gt; \n  ggplot(aes(x = species, y = bill_depth_mm)) +\n  geom_boxplot()\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nAdd colour fill:\n\npenguins |&gt; \n  ggplot(aes(x = species, y = bill_depth_mm, fill = sex)) +\n  geom_boxplot(outlier.shape = 3, alpha = 0.5)\n\nWarning: Removed 2 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "code/week4_live.html#gapminder-data",
    "href": "code/week4_live.html#gapminder-data",
    "title": "Data science session 3",
    "section": "Gapminder data",
    "text": "Gapminder data\n\nsummary(gapminder)\n\n        country        continent        year         lifeExp     \n Afghanistan:  12   Africa  :624   Min.   :1952   Min.   :23.60  \n Albania    :  12   Americas:300   1st Qu.:1966   1st Qu.:48.20  \n Algeria    :  12   Asia    :396   Median :1980   Median :60.71  \n Angola     :  12   Europe  :360   Mean   :1980   Mean   :59.47  \n Argentina  :  12   Oceania : 24   3rd Qu.:1993   3rd Qu.:70.85  \n Australia  :  12                  Max.   :2007   Max.   :82.60  \n (Other)    :1632                                                \n      pop              gdpPercap       \n Min.   :6.001e+04   Min.   :   241.2  \n 1st Qu.:2.794e+06   1st Qu.:  1202.1  \n Median :7.024e+06   Median :  3531.8  \n Mean   :2.960e+07   Mean   :  7215.3  \n 3rd Qu.:1.959e+07   3rd Qu.:  9325.5  \n Max.   :1.319e+09   Max.   :113523.1  \n                                       \n\n\n\nHow has life expectancy in Germany changed over time?\n\n\ngapminder |&gt; \n  filter(country == \"Germany\") |&gt; \n  ggplot(aes(x = year, y = lifeExp)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\nWhat was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\n\nStart by looking at 1952:\n\ngapminder |&gt; \n  filter(year == 1952) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\nIdentify the outlier:\n\ngapminder |&gt; \n  filter(year == 1952, gdpPercap &gt; 90000)\n\n# A tibble: 1 × 6\n  country continent  year lifeExp    pop gdpPercap\n  &lt;fct&gt;   &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;  &lt;int&gt;     &lt;dbl&gt;\n1 Kuwait  Asia       1952    55.6 160000   108382.\n\n\nRemove the outlier:\n\ngapminder |&gt; \n  filter(year == 1952, gdpPercap &lt; 90000) |&gt; \n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() +\n  scale_x_log10()\n\n\n\n\nNote that even after removing the outlier, there were still many datapoints “squashed together” close to 0, suggesting that there is a disparity of scale in regard to gdpPercap (i.e. the values of this variable for different countries are on different orders of magnitude). We have addressed this using a log scale (via the addition of scale_x_log10()).\nWe did not look at 2007 in the workshop on account of time constraints. However, the approach to do this would be parallel to the above.\n\nHow did the mean life expectancy per continent change over time?\n\n\ngapminder |&gt; \n  group_by(continent, year) |&gt; \n  summarise(mean_lifeExp = mean(lifeExp, na.rm = TRUE)) |&gt; \n  ggplot(aes(x = year, y = mean_lifeExp, colour = continent)) +\n  geom_line()\n\n`summarise()` has grouped output by 'continent'. You can override using the\n`.groups` argument.\n\n\n\n\n\nThe below question was not examined in the workshop due to time constraints.\n\nWhich continent had the highest variability in population across countries? Pick two years of your choice to examine."
  },
  {
    "objectID": "code/customising_quarto.html",
    "href": "code/customising_quarto.html",
    "title": "Customising Quarto Documents",
    "section": "",
    "text": "You already have quite a bit of experience with creating basic Quarto documents. For your project / report, however, you will want to create a more appealing document. Here are a few more tips to help you get started with this. For more details see https://quarto.org. For much more detail, see the Quarto User Guide.\n\n\nYou can embed additional levels of subheadings by using more hashes. To make text appear bold or in italics use asterisks. For embedded code, use backticks, e.g. to refer to a function such as filter().\n\n\n\n\ndotpoints can be created easily\nby using asterisks\nto create different levels\n\nuse tabs\nhere is one more\n\n\n\nnumbered lists\nwork in much the same way"
  },
  {
    "objectID": "code/customising_quarto.html#quarto-and-markdown-basics",
    "href": "code/customising_quarto.html#quarto-and-markdown-basics",
    "title": "Customising Quarto Documents",
    "section": "",
    "text": "You already have quite a bit of experience with creating basic Quarto documents. For your project / report, however, you will want to create a more appealing document. Here are a few more tips to help you get started with this. For more details see https://quarto.org. For much more detail, see the Quarto User Guide.\n\n\nYou can embed additional levels of subheadings by using more hashes. To make text appear bold or in italics use asterisks. For embedded code, use backticks, e.g. to refer to a function such as filter().\n\n\n\n\ndotpoints can be created easily\nby using asterisks\nto create different levels\n\nuse tabs\nhere is one more\n\n\n\nnumbered lists\nwork in much the same way"
  },
  {
    "objectID": "code/customising_quarto.html#customising-overall-appearance",
    "href": "code/customising_quarto.html#customising-overall-appearance",
    "title": "Customising Quarto Documents",
    "section": "Customising overall appearance",
    "text": "Customising overall appearance\nTo customise the overall appearance of your Quarto document, you can change the theme. This document uses the lux theme – see the YAML header of the source document to see how to set the theme. A list of themes can be found here.\nThere are also many other options, e.g. in regard to including a table of contents (or not) and how it is displayed. For html documents, as we are using here, this section of the Quarto User Guide is very useful in this regard."
  },
  {
    "objectID": "code/customising_quarto.html#code-chunk-behaviour",
    "href": "code/customising_quarto.html#code-chunk-behaviour",
    "title": "Customising Quarto Documents",
    "section": "Code chunk behaviour",
    "text": "Code chunk behaviour\nFor your final report, you won’t want code to appear in the output document. You can customise the behaviour of code chunks by setting the execute options in the header of the document. For example, to run the code in each chunk without displaying the code itself in the knitted document, set echo: false. You can override this overall setting on a chunk-by-chunk basis; see this section of the user guide on how to do this."
  },
  {
    "objectID": "code/customising_quarto.html#including-other-images",
    "href": "code/customising_quarto.html#including-other-images",
    "title": "Customising Quarto Documents",
    "section": "Including other images",
    "text": "Including other images\nIncluding other image files is easy! Include your figure caption in square brackets and the location of the image file relative to your Quarto document in round brackets. The location of the image file is called a “path” in technical terms: the easiest option is to have the file in the same folder as your .qmd document and to use a project-based workflow as discussed for reading in csv or other files for data exploration and analysis.\n\n\n\nPalmer penguins - Artwork by @allison_horst"
  },
  {
    "objectID": "code/customising_quarto.html#referencing-in-quarto",
    "href": "code/customising_quarto.html#referencing-in-quarto",
    "title": "Customising Quarto Documents",
    "section": "Referencing in Quarto",
    "text": "Referencing in Quarto\nCommunicating your results is an essential part of the data science workflow (Wickham & Grolemund, 2017). This of course also involves appropriate referencing. For example, if you’re working with data on the Palmer archipelago penguins, you should mention that these are from Gorman et al. (2014) and provided as an R package by Horst et al. (2020). Note the different format for introducing references in parentheses and outside of them. How you refer to a reference depends on the citation key in your bib file.\nTo change the referencing style, use a csl file and refer to it in your header. You can find csl files for different referencing styles in the Zotero style repository.\nFor further information, see the Quarto Manual."
  },
  {
    "objectID": "code/session7_live.html",
    "href": "code/session7_live.html",
    "title": "Session 7",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(nycflights13)"
  },
  {
    "objectID": "code/session7_live.html#joining-data-frames",
    "href": "code/session7_live.html#joining-data-frames",
    "title": "Session 7",
    "section": "Joining data frames",
    "text": "Joining data frames\nStart with a left-join example:\n\nflights |&gt; \n  select(year,month,day,dep_time,carrier,flight,origin,dest) |&gt; \n  left_join(airlines, by = \"carrier\")\n\n# A tibble: 336,776 × 9\n    year month   day dep_time carrier flight origin dest  name                  \n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                 \n 1  2013     1     1      517 UA        1545 EWR    IAH   United Air Lines Inc. \n 2  2013     1     1      533 UA        1714 LGA    IAH   United Air Lines Inc. \n 3  2013     1     1      542 AA        1141 JFK    MIA   American Airlines Inc.\n 4  2013     1     1      544 B6         725 JFK    BQN   JetBlue Airways       \n 5  2013     1     1      554 DL         461 LGA    ATL   Delta Air Lines Inc.  \n 6  2013     1     1      554 UA        1696 EWR    ORD   United Air Lines Inc. \n 7  2013     1     1      555 B6         507 EWR    FLL   JetBlue Airways       \n 8  2013     1     1      557 EV        5708 LGA    IAD   ExpressJet Airlines I…\n 9  2013     1     1      557 B6          79 JFK    MCO   JetBlue Airways       \n10  2013     1     1      558 AA         301 LGA    ORD   American Airlines Inc.\n# ℹ 336,766 more rows\n\n\nInner join to only look at Hawaiian and Alaskan airlines.\n\nairlines2 &lt;- airlines |&gt; \n  filter(carrier %in% c(\"HA\",\"AS\"))\n\nflights |&gt; \n  select(year,month,day,dep_time,carrier,flight,origin,dest) |&gt; \n  inner_join(airlines2, by = \"carrier\")\n\n# A tibble: 1,056 × 9\n    year month   day dep_time carrier flight origin dest  name                  \n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                 \n 1  2013     1     1      724 AS          11 EWR    SEA   Alaska Airlines Inc.  \n 2  2013     1     1      857 HA          51 JFK    HNL   Hawaiian Airlines Inc.\n 3  2013     1     1     1808 AS           7 EWR    SEA   Alaska Airlines Inc.  \n 4  2013     1     2      722 AS          11 EWR    SEA   Alaska Airlines Inc.  \n 5  2013     1     2      909 HA          51 JFK    HNL   Hawaiian Airlines Inc.\n 6  2013     1     2     1818 AS           7 EWR    SEA   Alaska Airlines Inc.  \n 7  2013     1     3      724 AS          11 EWR    SEA   Alaska Airlines Inc.  \n 8  2013     1     3      914 HA          51 JFK    HNL   Hawaiian Airlines Inc.\n 9  2013     1     3     1817 AS           7 EWR    SEA   Alaska Airlines Inc.  \n10  2013     1     4      725 AS          11 EWR    SEA   Alaska Airlines Inc.  \n# ℹ 1,046 more rows\n\n\nUsing left join on our airlines2 data frame would produce missing values\n\nflights |&gt; \n  select(year,month,day,dep_time,carrier,flight,origin,dest) |&gt; \n  left_join(airlines2, by = \"carrier\")\n\n# A tibble: 336,776 × 9\n    year month   day dep_time carrier flight origin dest  name \n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;\n 1  2013     1     1      517 UA        1545 EWR    IAH   &lt;NA&gt; \n 2  2013     1     1      533 UA        1714 LGA    IAH   &lt;NA&gt; \n 3  2013     1     1      542 AA        1141 JFK    MIA   &lt;NA&gt; \n 4  2013     1     1      544 B6         725 JFK    BQN   &lt;NA&gt; \n 5  2013     1     1      554 DL         461 LGA    ATL   &lt;NA&gt; \n 6  2013     1     1      554 UA        1696 EWR    ORD   &lt;NA&gt; \n 7  2013     1     1      555 B6         507 EWR    FLL   &lt;NA&gt; \n 8  2013     1     1      557 EV        5708 LGA    IAD   &lt;NA&gt; \n 9  2013     1     1      557 B6          79 JFK    MCO   &lt;NA&gt; \n10  2013     1     1      558 AA         301 LGA    ORD   &lt;NA&gt; \n# ℹ 336,766 more rows\n\n\nJoining data frames with non-overlapping key names\n\nweather |&gt; \n  select(origin:humid) |&gt; \n  left_join(airports, by = c(\"origin\" = \"faa\"))\n\n# A tibble: 26,115 × 15\n   origin  year month   day  hour  temp  dewp humid name         lat   lon   alt\n   &lt;chr&gt;  &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 EWR     2013     1     1     1  39.0  26.1  59.4 Newark Li…  40.7 -74.2    18\n 2 EWR     2013     1     1     2  39.0  27.0  61.6 Newark Li…  40.7 -74.2    18\n 3 EWR     2013     1     1     3  39.0  28.0  64.4 Newark Li…  40.7 -74.2    18\n 4 EWR     2013     1     1     4  39.9  28.0  62.2 Newark Li…  40.7 -74.2    18\n 5 EWR     2013     1     1     5  39.0  28.0  64.4 Newark Li…  40.7 -74.2    18\n 6 EWR     2013     1     1     6  37.9  28.0  67.2 Newark Li…  40.7 -74.2    18\n 7 EWR     2013     1     1     7  39.0  28.0  64.4 Newark Li…  40.7 -74.2    18\n 8 EWR     2013     1     1     8  39.9  28.0  62.2 Newark Li…  40.7 -74.2    18\n 9 EWR     2013     1     1     9  39.9  28.0  62.2 Newark Li…  40.7 -74.2    18\n10 EWR     2013     1     1    10  41    28.0  59.6 Newark Li…  40.7 -74.2    18\n# ℹ 26,105 more rows\n# ℹ 3 more variables: tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;"
  },
  {
    "objectID": "code/session7_live.html#workinf-with-strings",
    "href": "code/session7_live.html#workinf-with-strings",
    "title": "Session 7",
    "section": "Workinf with strings",
    "text": "Workinf with strings\nImport spotify data.\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nspotify &lt;- read_csv(\"spotify_dataset.csv\") |&gt; \n  clean_names()\n\nRows: 1556 Columns: 23\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Week of Highest Charting, Song Name, Artist, Song ID, Genre, Relea...\ndbl (14): Index, Highest Charting Position, Number of Times Charted, Artist ...\nnum  (1): Streams\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(spotify)\n\nRows: 1,556\nColumns: 23\n$ index                     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…\n$ highest_charting_position &lt;dbl&gt; 1, 2, 1, 3, 5, 1, 3, 2, 3, 8, 4, 9, 5, 1, 2,…\n$ number_of_times_charted   &lt;dbl&gt; 8, 3, 11, 5, 1, 18, 16, 10, 8, 10, 43, 9, 3,…\n$ week_of_highest_charting  &lt;chr&gt; \"2021-07-23--2021-07-30\", \"2021-07-23--2021-…\n$ song_name                 &lt;chr&gt; \"Beggin'\", \"STAY (with Justin Bieber)\", \"goo…\n$ streams                   &lt;dbl&gt; 48633449, 47248719, 40162559, 37799456, 3394…\n$ artist                    &lt;chr&gt; \"Måneskin\", \"The Kid LAROI\", \"Olivia Rodrigo…\n$ artist_followers          &lt;dbl&gt; 3377762, 2230022, 6266514, 83293380, 5473565…\n$ song_id                   &lt;chr&gt; \"3Wrjm47oTz2sjIgck11l5e\", \"5HCyWlXZPP0y6Gqq8…\n$ genre                     &lt;chr&gt; \"['indie rock italiano', 'italian pop']\", \"[…\n$ release_date              &lt;chr&gt; \"2017-12-08\", \"2021-07-09\", \"2021-05-21\", \"2…\n$ weeks_charted             &lt;chr&gt; \"2021-07-23--2021-07-30\\n2021-07-16--2021-07…\n$ popularity                &lt;dbl&gt; 100, 99, 99, 98, 96, 97, 94, 95, 96, 95, 89,…\n$ danceability              &lt;dbl&gt; 0.714, 0.591, 0.563, 0.808, 0.736, 0.610, 0.…\n$ energy                    &lt;dbl&gt; 0.800, 0.764, 0.664, 0.897, 0.704, 0.508, 0.…\n$ loudness                  &lt;dbl&gt; -4.808, -5.484, -5.044, -3.712, -7.409, -6.6…\n$ speechiness               &lt;dbl&gt; 0.0504, 0.0483, 0.1540, 0.0348, 0.0615, 0.15…\n$ acousticness              &lt;dbl&gt; 0.12700, 0.03830, 0.33500, 0.04690, 0.02030,…\n$ liveness                  &lt;dbl&gt; 0.3590, 0.1030, 0.0849, 0.3640, 0.0501, 0.38…\n$ tempo                     &lt;dbl&gt; 134.002, 169.928, 166.928, 126.026, 149.995,…\n$ duration_ms               &lt;dbl&gt; 211560, 141806, 178147, 231041, 212000, 1378…\n$ valence                   &lt;dbl&gt; 0.5890, 0.4780, 0.6880, 0.5910, 0.8940, 0.75…\n$ chord                     &lt;chr&gt; \"B\", \"C#/Db\", \"A\", \"B\", \"D#/Eb\", \"G#/Ab\", \"G…\n\n\nUsing str_sub() to extract substrings:\n\nspotify |&gt; \n  mutate(chord_simplified = str_sub(chord,1,1)) |&gt; \n  count(chord_simplified, sort=TRUE)\n\n# A tibble: 8 × 2\n  chord_simplified     n\n  &lt;chr&gt;            &lt;int&gt;\n1 C                  369\n2 G                  266\n3 F                  252\n4 A                  240\n5 D                  165\n6 B                  141\n7 E                  112\n8 &lt;NA&gt;                11\n\n\nstr_detect() detects patterns within a string.\n\nspotify |&gt; \n  filter(str_detect(genre,\"pop\")) |&gt; \n  select(artist,song_name,genre)\n\n# A tibble: 819 × 3\n   artist         song_name                         genre                       \n   &lt;chr&gt;          &lt;chr&gt;                             &lt;chr&gt;                       \n 1 Måneskin       Beggin'                           ['indie rock italiano', 'it…\n 2 Olivia Rodrigo good 4 u                          ['pop']                     \n 3 Ed Sheeran     Bad Habits                        ['pop', 'uk pop']           \n 4 Lil Nas X      INDUSTRY BABY (feat. Jack Harlow) ['lgbtq+ hip hop', 'pop rap…\n 5 Lil Nas X      MONTERO (Call Me By Your Name)    ['lgbtq+ hip hop', 'pop rap…\n 6 Doja Cat       Kiss Me More (feat. SZA)          ['dance pop', 'pop']        \n 7 Rauw Alejandro Todo De Ti                        ['puerto rican pop', 'trap …\n 8 Måneskin       I WANNA BE YOUR SLAVE             ['indie rock italiano', 'it…\n 9 Dua Lipa       Levitating (feat. DaBaby)         ['dance pop', 'pop', 'uk po…\n10 BTS            Permission to Dance               ['k-pop', 'k-pop boy group']\n# ℹ 809 more rows\n\n\nUse str_extract() to extract patterns rather than just detect.\n\nspotify |&gt; \n  mutate(genre_simple = str_extract(genre,\"pop\")) |&gt; \n  select(artist,song_name,genre,genre_simple)\n\n# A tibble: 1,556 × 4\n   artist         song_name                         genre           genre_simple\n   &lt;chr&gt;          &lt;chr&gt;                             &lt;chr&gt;           &lt;chr&gt;       \n 1 Måneskin       Beggin'                           ['indie rock i… pop         \n 2 The Kid LAROI  STAY (with Justin Bieber)         ['australian h… &lt;NA&gt;        \n 3 Olivia Rodrigo good 4 u                          ['pop']         pop         \n 4 Ed Sheeran     Bad Habits                        ['pop', 'uk po… pop         \n 5 Lil Nas X      INDUSTRY BABY (feat. Jack Harlow) ['lgbtq+ hip h… pop         \n 6 Lil Nas X      MONTERO (Call Me By Your Name)    ['lgbtq+ hip h… pop         \n 7 Doja Cat       Kiss Me More (feat. SZA)          ['dance pop', … pop         \n 8 Rauw Alejandro Todo De Ti                        ['puerto rican… pop         \n 9 Bad Bunny      Yonaguni                          ['latin', 'reg… &lt;NA&gt;        \n10 Måneskin       I WANNA BE YOUR SLAVE             ['indie rock i… pop         \n# ℹ 1,546 more rows\n\n\nSplitting up information into different rows\n\nspotify |&gt; \n  select(artist,song_name,genre) |&gt; \n  separate_longer_delim(genre, delim=\",\")\n\n# A tibble: 4,665 × 3\n   artist         song_name                         genre                   \n   &lt;chr&gt;          &lt;chr&gt;                             &lt;chr&gt;                   \n 1 Måneskin       Beggin'                           \"['indie rock italiano'\"\n 2 Måneskin       Beggin'                           \" 'italian pop']\"       \n 3 The Kid LAROI  STAY (with Justin Bieber)         \"['australian hip hop']\"\n 4 Olivia Rodrigo good 4 u                          \"['pop']\"               \n 5 Ed Sheeran     Bad Habits                        \"['pop'\"                \n 6 Ed Sheeran     Bad Habits                        \" 'uk pop']\"            \n 7 Lil Nas X      INDUSTRY BABY (feat. Jack Harlow) \"['lgbtq+ hip hop'\"     \n 8 Lil Nas X      INDUSTRY BABY (feat. Jack Harlow) \" 'pop rap']\"           \n 9 Lil Nas X      MONTERO (Call Me By Your Name)    \"['lgbtq+ hip hop'\"     \n10 Lil Nas X      MONTERO (Call Me By Your Name)    \" 'pop rap']\"           \n# ℹ 4,655 more rows\n\n\nA bit more on patterns …\nFind all airports containing “New”:\n\nairports |&gt; \n  filter(str_detect(name,\"New\"))\n\n# A tibble: 19 × 8\n   faa   name                               lat    lon   alt    tz dst   tzone  \n   &lt;chr&gt; &lt;chr&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  \n 1 EHM   Cape Newenham Lrrs                58.6 -162.    541    -9 A     Americ…\n 2 ESN   Easton-Newnam Field Airport       38.8  -76.1    72    -5 A     Americ…\n 3 EWB   New Bedford Regional Airport      41.7  -71.0    80    -5 A     Americ…\n 4 EWK   Newton City-County Airport        38.1  -97.3  1533    -6 A     Americ…\n 5 EWR   Newark Liberty Intl               40.7  -74.2    18    -5 A     Americ…\n 6 GON   Groton New London                 41.3  -72.0     9    -5 A     Americ…\n 7 HVN   Tweed-New Haven Airport           41.3  -72.9    14    -5 A     Americ…\n 8 ILG   New Castle                        39.7  -75.6    79    -5 A     Americ…\n 9 JCI   New Century AirCenter Airport     38.8  -94.9  1087    -6 A     Americ…\n10 KNW   New Stuyahok Airport              59.4 -157.    302    -9 A     Americ…\n11 MSY   Louis Armstrong New Orleans Intl  30.0  -90.3     4    -6 A     Americ…\n12 NBG   New Orleans Nas Jrb               29.8  -90.0     3    -6 A     Americ…\n13 ONP   Newport Municipal Airport         44.6 -124.    160    -8 A     Americ…\n14 PHF   Newport News Williamsburg Intl    37.1  -76.5    43    -5 A     Americ…\n15 UUU   Newport State                     41.5  -71.3   172    -5 A     Americ…\n16 WWT   Newtok Airport                    60.9 -165.     25    -9 U     Americ…\n17 ZRP   Newark Penn Station               40.7  -74.2     0    -5 A     Americ…\n18 ZRZ   New Carrollton Rail Station       38.9  -76.9    39    -5 A     Americ…\n19 ZVE   New Haven Rail Station            41.3  -72.9     7    -5 A     Americ…\n\n\nBut this is case sensitive\n\nairports |&gt; \n  filter(str_detect(name,\"new\"))\n\n# A tibble: 1 × 8\n  faa   name               lat   lon   alt    tz dst   tzone            \n  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;            \n1 GNU   Goodnews Airport  59.1 -162.    15    -9 A     America/Anchorage\n\n\nUse a regular expression to look for upper and lower case n/N\n\nairports |&gt; \n  filter(str_detect(name,\"[nN]ew\"))\n\n# A tibble: 20 × 8\n   faa   name                               lat    lon   alt    tz dst   tzone  \n   &lt;chr&gt; &lt;chr&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  \n 1 EHM   Cape Newenham Lrrs                58.6 -162.    541    -9 A     Americ…\n 2 ESN   Easton-Newnam Field Airport       38.8  -76.1    72    -5 A     Americ…\n 3 EWB   New Bedford Regional Airport      41.7  -71.0    80    -5 A     Americ…\n 4 EWK   Newton City-County Airport        38.1  -97.3  1533    -6 A     Americ…\n 5 EWR   Newark Liberty Intl               40.7  -74.2    18    -5 A     Americ…\n 6 GNU   Goodnews Airport                  59.1 -162.     15    -9 A     Americ…\n 7 GON   Groton New London                 41.3  -72.0     9    -5 A     Americ…\n 8 HVN   Tweed-New Haven Airport           41.3  -72.9    14    -5 A     Americ…\n 9 ILG   New Castle                        39.7  -75.6    79    -5 A     Americ…\n10 JCI   New Century AirCenter Airport     38.8  -94.9  1087    -6 A     Americ…\n11 KNW   New Stuyahok Airport              59.4 -157.    302    -9 A     Americ…\n12 MSY   Louis Armstrong New Orleans Intl  30.0  -90.3     4    -6 A     Americ…\n13 NBG   New Orleans Nas Jrb               29.8  -90.0     3    -6 A     Americ…\n14 ONP   Newport Municipal Airport         44.6 -124.    160    -8 A     Americ…\n15 PHF   Newport News Williamsburg Intl    37.1  -76.5    43    -5 A     Americ…\n16 UUU   Newport State                     41.5  -71.3   172    -5 A     Americ…\n17 WWT   Newtok Airport                    60.9 -165.     25    -9 U     Americ…\n18 ZRP   Newark Penn Station               40.7  -74.2     0    -5 A     Americ…\n19 ZRZ   New Carrollton Rail Station       38.9  -76.9    39    -5 A     Americ…\n20 ZVE   New Haven Rail Station            41.3  -72.9     7    -5 A     Americ…\n\n\nJust look for “New” at the beginning of the name\n\nairports |&gt; \n  filter(str_detect(name,\"^New\"))\n\n# A tibble: 14 × 8\n   faa   name                             lat    lon   alt    tz dst   tzone    \n   &lt;chr&gt; &lt;chr&gt;                          &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;    \n 1 EWB   New Bedford Regional Airport    41.7  -71.0    80    -5 A     America/…\n 2 EWK   Newton City-County Airport      38.1  -97.3  1533    -6 A     America/…\n 3 EWR   Newark Liberty Intl             40.7  -74.2    18    -5 A     America/…\n 4 ILG   New Castle                      39.7  -75.6    79    -5 A     America/…\n 5 JCI   New Century AirCenter Airport   38.8  -94.9  1087    -6 A     America/…\n 6 KNW   New Stuyahok Airport            59.4 -157.    302    -9 A     America/…\n 7 NBG   New Orleans Nas Jrb             29.8  -90.0     3    -6 A     America/…\n 8 ONP   Newport Municipal Airport       44.6 -124.    160    -8 A     America/…\n 9 PHF   Newport News Williamsburg Intl  37.1  -76.5    43    -5 A     America/…\n10 UUU   Newport State                   41.5  -71.3   172    -5 A     America/…\n11 WWT   Newtok Airport                  60.9 -165.     25    -9 U     America/…\n12 ZRP   Newark Penn Station             40.7  -74.2     0    -5 A     America/…\n13 ZRZ   New Carrollton Rail Station     38.9  -76.9    39    -5 A     America/…\n14 ZVE   New Haven Rail Station          41.3  -72.9     7    -5 A     America/…\n\n\n\nlibrary(reclues)"
  },
  {
    "objectID": "code/week6.html",
    "href": "code/week6.html",
    "title": "Week 6 live coding",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "code/week6.html#characteristics-of-tidy-data",
    "href": "code/week6.html#characteristics-of-tidy-data",
    "title": "Week 6 live coding",
    "section": "Characteristics of tidy data",
    "text": "Characteristics of tidy data\nInspect tables 1–3.\n\ntable1\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\nInspect tables 4a and 4b.\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\ntable4b\n\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  &lt;chr&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583"
  },
  {
    "objectID": "code/week6.html#pivoting-to-longer",
    "href": "code/week6.html#pivoting-to-longer",
    "title": "Week 6 live coding",
    "section": "Pivoting to longer",
    "text": "Pivoting to longer\n\ntable4a |&gt; \n  pivot_longer(c(`1999`,`2000`),\n               names_to = \"year\",\n               values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\nHere, the c() operator concatenates objects into a vector, e.g.\n\nx &lt;- c(\"apples\", \"oranges\", \"bananas\")\n\nx\n\n[1] \"apples\"  \"oranges\" \"bananas\"\n\n# You can select individual objects from the vector through their index\nx[1]\n\n[1] \"apples\"\n\n\nAlternative syntax for picking out columns that are contiguous:\n\ntable4a |&gt; \n  pivot_longer(`1999`:`2000`,\n               names_to = \"year\",\n               values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\n\n\n\n\n\n\nThe difference between c() and :\n\n\n\n\n\nAn example to illustrate the difference between using c() and : to select columns. Use c() to select any two columns in the penguins data; use : to select columns that are adjacent to one another by specifying the first and last columns\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\npenguins |&gt; \n  select(c(species, flipper_length_mm))\n\n# A tibble: 344 × 2\n   species flipper_length_mm\n   &lt;fct&gt;               &lt;int&gt;\n 1 Adelie                181\n 2 Adelie                186\n 3 Adelie                195\n 4 Adelie                 NA\n 5 Adelie                193\n 6 Adelie                190\n 7 Adelie                181\n 8 Adelie                195\n 9 Adelie                193\n10 Adelie                190\n# ℹ 334 more rows\n\npenguins |&gt; \n  select(species:flipper_length_mm)\n\n# A tibble: 344 × 5\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181\n 2 Adelie  Torgersen           39.5          17.4               186\n 3 Adelie  Torgersen           40.3          18                 195\n 4 Adelie  Torgersen           NA            NA                  NA\n 5 Adelie  Torgersen           36.7          19.3               193\n 6 Adelie  Torgersen           39.3          20.6               190\n 7 Adelie  Torgersen           38.9          17.8               181\n 8 Adelie  Torgersen           39.2          19.6               195\n 9 Adelie  Torgersen           34.1          18.1               193\n10 Adelie  Torgersen           42            20.2               190\n# ℹ 334 more rows\n\n\n\n\n\nPivoting table4b as another exercise:\n\ntable4b |&gt; \n  pivot_longer(`1999`:`2000`,\n               names_to = \"year\",\n               values_to = \"population\")\n\n# A tibble: 6 × 3\n  country     year  population\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;\n1 Afghanistan 1999    19987071\n2 Afghanistan 2000    20595360\n3 Brazil      1999   172006362\n4 Brazil      2000   174504898\n5 China       1999  1272915272\n6 China       2000  1280428583"
  },
  {
    "objectID": "code/week6.html#pivoting-to-wider",
    "href": "code/week6.html#pivoting-to-wider",
    "title": "Week 6 live coding",
    "section": "Pivoting to wider",
    "text": "Pivoting to wider\n\ntable2 |&gt; \n  pivot_wider(names_from = \"type\",\n              values_from = \"count\")\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "code/week6.html#separating-columns",
    "href": "code/week6.html#separating-columns",
    "title": "Week 6 live coding",
    "section": "Separating columns",
    "text": "Separating columns\n\ntable3 |&gt; \n  separate(col = rate, into = c(\"cases\",\"population\"))\n\n# A tibble: 6 × 4\n  country      year cases  population\n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     \n1 Afghanistan  1999 745    19987071  \n2 Afghanistan  2000 2666   20595360  \n3 Brazil       1999 37737  172006362 \n4 Brazil       2000 80488  174504898 \n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\nSet convert to TRUE to ensure that columns are of the correct type:\n\ntable3 |&gt; \n  separate(col = rate, into = c(\"cases\",\"population\"), convert = TRUE)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;int&gt;      &lt;int&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "code/week5.html",
    "href": "code/week5.html",
    "title": "Week 5",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "code/week5.html#importing-files",
    "href": "code/week5.html#importing-files",
    "title": "Week 5",
    "section": "Importing files",
    "text": "Importing files\nUse read_csv() to read a csv file. Using the project-based approach as discussed in the workshop and assuming that your .qmd file and the .csv file are both in the project directory, you only need to specify the file name.\n\nst_ratios &lt;- read_csv(\"student_teacher_ratios.csv\")\n\nRows: 180 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): indicator, country, country_code, edulit_ind, flag_codes, flags, n...\ndbl  (5): year, student_ratio, x, y, student_ratio_region\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nInspect the data\n\nst_ratios\n\n# A tibble: 180 × 20\n   indicator      country country_code edulit_ind  year student_ratio flag_codes\n   &lt;chr&gt;          &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;     \n 1 Primary Educa… Afghan… AFG          PTRHC_1     2017          44.0 &lt;NA&gt;      \n 2 Primary Educa… Albania ALB          PTRHC_1     2017          17.9 &lt;NA&gt;      \n 3 Primary Educa… Algeria DZA          PTRHC_1     2017          24.2 &lt;NA&gt;      \n 4 Primary Educa… Angola  AGO          PTRHC_1     2015          50.0 &lt;NA&gt;      \n 5 Primary Educa… Antigu… ATG          PTRHC_1     2017          12.1 &lt;NA&gt;      \n 6 Primary Educa… Argent… ARG          &lt;NA&gt;          NA          NA   &lt;NA&gt;      \n 7 Primary Educa… Armenia ARM          &lt;NA&gt;          NA          NA   &lt;NA&gt;      \n 8 Primary Educa… Austria AUT          PTRHC_1     2017          10.0 &lt;NA&gt;      \n 9 Primary Educa… Azerba… AZE          PTRHC_1     2017          15.5 &lt;NA&gt;      \n10 Primary Educa… Bahamas BHS          PTRHC_1     2016          19.0 &lt;NA&gt;      \n# ℹ 170 more rows\n# ℹ 13 more variables: flags &lt;chr&gt;, name &lt;chr&gt;, alpha.2 &lt;chr&gt;, alpha.3 &lt;chr&gt;,\n#   country.code &lt;chr&gt;, iso_3166.2 &lt;chr&gt;, region &lt;chr&gt;, sub.region &lt;chr&gt;,\n#   region.code &lt;chr&gt;, sub.region.code &lt;chr&gt;, x &lt;dbl&gt;, y &lt;dbl&gt;,\n#   student_ratio_region &lt;dbl&gt;\n\nglimpse(st_ratios)\n\nRows: 180\nColumns: 20\n$ indicator            &lt;chr&gt; \"Primary Education\", \"Primary Education\", \"Primar…\n$ country              &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"A…\n$ country_code         &lt;chr&gt; \"AFG\", \"ALB\", \"DZA\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", …\n$ edulit_ind           &lt;chr&gt; \"PTRHC_1\", \"PTRHC_1\", \"PTRHC_1\", \"PTRHC_1\", \"PTRH…\n$ year                 &lt;dbl&gt; 2017, 2017, 2017, 2015, 2017, NA, NA, 2017, 2017,…\n$ student_ratio        &lt;dbl&gt; 44.00995, 17.94478, 24.22505, 50.02951, 12.05576,…\n$ flag_codes           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flags                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ name                 &lt;chr&gt; \"Afghanistan\", \"Albania\", \"Algeria\", \"Angola\", \"A…\n$ alpha.2              &lt;chr&gt; \"AF\", \"AL\", \"DZ\", \"AO\", \"AG\", \"AR\", \"AM\", \"AT\", \"…\n$ alpha.3              &lt;chr&gt; \"AFG\", \"ALB\", \"DZA\", \"AGO\", \"ATG\", \"ARG\", \"ARM\", …\n$ country.code         &lt;chr&gt; \"004\", \"008\", \"012\", \"024\", \"028\", \"032\", \"051\", …\n$ iso_3166.2           &lt;chr&gt; \"ISO 3166-2:AF\", \"ISO 3166-2:AL\", \"ISO 3166-2:DZ\"…\n$ region               &lt;chr&gt; \"Asia\", \"Europe\", \"Africa\", \"Africa\", \"North Amer…\n$ sub.region           &lt;chr&gt; \"Southern Asia\", \"Southern Europe\", \"Northern Afr…\n$ region.code          &lt;chr&gt; \"142\", \"150\", \"002\", \"002\", \"019\", \"019\", \"142\", …\n$ sub.region.code      &lt;chr&gt; \"034\", \"039\", \"015\", \"017\", \"029\", \"005\", \"145\", …\n$ x                    &lt;dbl&gt; 22, 15, 13, 13, 7, 6, 20, 15, 21, 4, 20, 23, 8, 1…\n$ y                    &lt;dbl&gt; 8, 9, 11, 17, 4, 14, 6, 6, 7, 2, 9, 8, 6, 4, 5, 3…\n$ student_ratio_region &lt;dbl&gt; 19.64278, 13.01069, 36.38758, 36.38758, 16.18269,…\n\n\nSelect the columns of interest\n\nst_ratios_sel &lt;- st_ratios |&gt; \n  select(country, region, student_ratio)\n\nst_ratios_sel\n\n# A tibble: 180 × 3\n   country             region        student_ratio\n   &lt;chr&gt;               &lt;chr&gt;                 &lt;dbl&gt;\n 1 Afghanistan         Asia                   44.0\n 2 Albania             Europe                 17.9\n 3 Algeria             Africa                 24.2\n 4 Angola              Africa                 50.0\n 5 Antigua and Barbuda North America          12.1\n 6 Argentina           South America          NA  \n 7 Armenia             Asia                   NA  \n 8 Austria             Europe                 10.0\n 9 Azerbaijan          Asia                   15.5\n10 Bahamas             North America          19.0\n# ℹ 170 more rows\n\n\n\nBrief exploration of the student-teacher data\n\n1. Which region has the highest variability?\nNote the use of a custom colour palette for the fill aesthetic and the use of a custom theme.\n\nst_ratios_sel |&gt; \n  ggplot(aes(x = region, y = student_ratio, fill = region)) +\n  geom_boxplot() +\n  coord_flip() +\n  scale_fill_brewer(palette = \"Dark2\") +\n  theme_bw() +\n  labs(\n    title = \"Student-teacher ratios\",\n    subtitle = \"by region\",\n    y = \"Student-to-teacher ratio\",\n    x = \"\",\n    fill = \"Continent\"\n  )\n\nWarning: Removed 15 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nDisplay the same information using a violin plot:\n\nst_ratios_sel |&gt; \n  ggplot(aes(x = region, y = student_ratio, colour = region)) +\n  geom_jitter(alpha = 0.5) +\n  geom_violin(alpha = 0.6) +\n  coord_flip() +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme_bw() +\n  guides(colour = \"none\") +\n  labs(\n    title = \"Student-teacher ratio\",\n    subtitle = \"by region\",\n    x = \"\",\n    y = \"Student-to-teacher ratio\"\n  )\n\nWarning: Removed 15 rows containing non-finite values (`stat_ydensity()`).\n\n\nWarning: Removed 15 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\n2. Focus on the region that you identified in 1.\n\nCreate a new dataframe just for this region.\n\nst_ratios_africa &lt;- st_ratios_sel |&gt; \n  filter(region == \"Africa\")\n\nst_ratios_africa\n\n# A tibble: 50 × 3\n   country                  region student_ratio\n   &lt;chr&gt;                    &lt;chr&gt;          &lt;dbl&gt;\n 1 Algeria                  Africa          24.2\n 2 Angola                   Africa          50.0\n 3 Benin                    Africa          43.6\n 4 Botswana                 Africa          22.6\n 5 Burkina Faso             Africa          40.7\n 6 Burundi                  Africa          49.6\n 7 Cabo Verde               Africa          21.1\n 8 Cameroon                 Africa          44.6\n 9 Central African Republic Africa          83.4\n10 Chad                     Africa          56.9\n# ℹ 40 more rows\n\n\n\n\nWhich country has the lowest ST-ratio in this region and which has the highest? What are these?\nPerhaps the simplest way to approach this is to use arrange() to sort the data in ascending and descending order.\n\nst_ratios_africa |&gt; \n  arrange(student_ratio)\n\n# A tibble: 50 × 3\n   country           region student_ratio\n   &lt;chr&gt;             &lt;chr&gt;          &lt;dbl&gt;\n 1 Seychelles        Africa          14.0\n 2 Tunisia           Africa          16.2\n 3 Mauritius         Africa          17.9\n 4 Comoros           Africa          18.9\n 5 Cabo Verde        Africa          21.1\n 6 Botswana          Africa          22.6\n 7 Equatorial Guinea Africa          23.2\n 8 Egypt             Africa          23.8\n 9 Algeria           Africa          24.2\n10 Liberia           Africa          27.1\n# ℹ 40 more rows\n\nst_ratios_africa |&gt; \n  arrange(-student_ratio)\n\n# A tibble: 50 × 3\n   country                     region student_ratio\n   &lt;chr&gt;                       &lt;chr&gt;          &lt;dbl&gt;\n 1 Central African Republic    Africa          83.4\n 2 Malawi                      Africa          69.5\n 3 Rwanda                      Africa          57.9\n 4 Chad                        Africa          56.9\n 5 Mozambique                  Africa          52.4\n 6 Angola                      Africa          50.0\n 7 Burundi                     Africa          49.6\n 8 United Republic of Tanzania Africa          47.2\n 9 Guinea                      Africa          47.1\n10 South Sudan                 Africa          46.8\n# ℹ 40 more rows\n\n\nA more principled way to extract the row with the highest or lowest value is to use slice_min() and slice_max(). Adding pull(variable_name) further allows you to extract the value in that cell for further use.\n\nst_ratios_africa |&gt; \n  slice_min(order_by = student_ratio, n = 1)\n\n# A tibble: 1 × 3\n  country    region student_ratio\n  &lt;chr&gt;      &lt;chr&gt;          &lt;dbl&gt;\n1 Seychelles Africa          14.0\n\nst_ratios_africa |&gt; \n  slice_max(order_by = student_ratio, n = 1) |&gt; \n  pull(country)\n\n[1] \"Central African Republic\"\n\n\n\n\nIsolate the countries with a ST-ratio higher than the median and plot the ST-ratios for these using an ordered horizontal column graph (recall from the week 4 exercises how to change the order). Use an appealing colour for the columns and pick a theme for the plot that you like.\nHere, you might first compute the mean using summarise and then use the resulting value to filter the data frame.\n\nst_ratios_africa |&gt; \n  summarise(median_ratio = median(student_ratio, na.rm = TRUE))\n\n# A tibble: 1 × 1\n  median_ratio\n         &lt;dbl&gt;\n1         36.4\n\nst_ratios_africa |&gt; \n  filter(student_ratio &gt; 36.4)\n\n# A tibble: 23 × 3\n   country                  region student_ratio\n   &lt;chr&gt;                    &lt;chr&gt;          &lt;dbl&gt;\n 1 Angola                   Africa          50.0\n 2 Benin                    Africa          43.6\n 3 Burkina Faso             Africa          40.7\n 4 Burundi                  Africa          49.6\n 5 Cameroon                 Africa          44.6\n 6 Central African Republic Africa          83.4\n 7 Chad                     Africa          56.9\n 8 Congo                    Africa          44.4\n 9 Côte d'Ivoire            Africa          42.4\n10 Eritrea                  Africa          39.2\n# ℹ 13 more rows\n\n\nAlternatively, you could again use pull() to extract the value from the data frame and save as a new object, which is then used to provide the value for the filter operation. This has the advantage of making the code more robust to changes, if there is an update to the underlying dataset (e.g. ten countries are added, thus changing the median value), the code will still yield accurate results.\n\nmedian_st_africa &lt;- st_ratios_africa |&gt; \n  summarise(median_ratio = median(student_ratio, na.rm = TRUE)) |&gt; \n  pull(median_ratio)\n\nst_ratios_africa |&gt; \n  filter(student_ratio &gt; median_st_africa)\n\n# A tibble: 23 × 3\n   country                  region student_ratio\n   &lt;chr&gt;                    &lt;chr&gt;          &lt;dbl&gt;\n 1 Angola                   Africa          50.0\n 2 Benin                    Africa          43.6\n 3 Burkina Faso             Africa          40.7\n 4 Burundi                  Africa          49.6\n 5 Cameroon                 Africa          44.6\n 6 Central African Republic Africa          83.4\n 7 Chad                     Africa          56.9\n 8 Congo                    Africa          44.4\n 9 Côte d'Ivoire            Africa          42.4\n10 Eritrea                  Africa          39.2\n# ℹ 13 more rows\n\n\nFinally, you can compute the median within filter() itself and then plot:\n\nst_ratios_africa |&gt; \n  filter(student_ratio &gt; median(student_ratio, na.rm=TRUE)) |&gt; \n  ggplot(aes(x = reorder(country,student_ratio), y = student_ratio)) +\n  geom_col(fill = \"palevioletred3\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(\n    title = \" Student-teacher ratios in African countries\",\n    subtitle = \"for countries with higher-than-median ST-ratios\",\n    x = \"\",\n    y = \"Student-to-teacher ratio\"\n  )"
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html",
    "href": "code/session4_himalayan_expeditions.html",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "",
    "text": "For our week 4 workshop, we will draw on a new data set, thus giving you the opportunity to practise and consolidate what we have covered over the past few weeks. The data set is on Himalayan climbing expeditions and it is drawn from a “Tidy Tuesday” challenge from 2020. #TidyTuesday is a “weekly social data project”, as a part of which participants around the world practice their data science skills in R by applying them to a new data set each week. See the Tidy Tuesday website and repository for further details.\nIn the week 4 workshop, we will first go through how to load the data set. You will then have time to explore the questions below. For each question, please provide a brief answer as well as the code that you used to get to your answer. When creating plots, add appropriate titles and axis labels.\nPlease upload the completed (and rendered) document in fulfilment of your week 4 exercises."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#background",
    "href": "code/session4_himalayan_expeditions.html#background",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "",
    "text": "For our week 4 workshop, we will draw on a new data set, thus giving you the opportunity to practise and consolidate what we have covered over the past few weeks. The data set is on Himalayan climbing expeditions and it is drawn from a “Tidy Tuesday” challenge from 2020. #TidyTuesday is a “weekly social data project”, as a part of which participants around the world practice their data science skills in R by applying them to a new data set each week. See the Tidy Tuesday website and repository for further details.\nIn the week 4 workshop, we will first go through how to load the data set. You will then have time to explore the questions below. For each question, please provide a brief answer as well as the code that you used to get to your answer. When creating plots, add appropriate titles and axis labels.\nPlease upload the completed (and rendered) document in fulfilment of your week 4 exercises."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#load-packages",
    "href": "code/session4_himalayan_expeditions.html#load-packages",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Load packages",
    "text": "Load packages\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors"
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#load-data-on-himalayan-climbing-expeditions",
    "href": "code/session4_himalayan_expeditions.html#load-data-on-himalayan-climbing-expeditions",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Load data on Himalayan climbing expeditions",
    "text": "Load data on Himalayan climbing expeditions\nDon’t worry about the details of the below code for now. In brief, it uses the function read_csv() to read in some data from files that have been made available on the Tidytuesday website. We will see how to read in our own data in week 5.\n\nmembers &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/members.csv')\n\nRows: 76519 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): expedition_id, member_id, peak_id, peak_name, season, sex, citizen...\ndbl  (5): year, age, highpoint_metres, death_height_metres, injury_height_me...\nlgl  (6): hired, success, solo, oxygen_used, died, injured\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nexpeditions &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/expeditions.csv')\n\nRows: 10364 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): expedition_id, peak_id, peak_name, season, termination_reason, tre...\ndbl  (6): year, highpoint_metres, members, member_deaths, hired_staff, hired...\nlgl  (1): oxygen_used\ndate (3): basecamp_date, highpoint_date, termination_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\npeaks &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/peaks.csv')\n\nRows: 468 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): peak_id, peak_name, peak_alternative_name, climbing_status, first_a...\ndbl (2): height_metres, first_ascent_year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#basic-exploration-of-peaks-and-their-climbing-status",
    "href": "code/session4_himalayan_expeditions.html#basic-exploration-of-peaks-and-their-climbing-status",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Basic exploration of peaks and their climbing status",
    "text": "Basic exploration of peaks and their climbing status\nWe start by using the peaks data.\n\nPlot a histogram of the height of the Himalayan peaks in the data set. Remember to adjust the binwidth parameter. Which value did you choose and why? Within which range of heights (roughly) do we find the most peaks?\nHow many peaks in the data set have been climbed and how many haven’t?\nDoes the distribution of heights differ between the peaks that have been climbed and those that haven’t? Use an appropriate visualisation to address this question.\nHow did the number of first ascents change over time? Use a line graph to chart the number of first ascents from year to year. (Hint: the first time you do this, you will likely see a very strange-looking graph. Use the summary() function to have a look at the values of first_ascent_year and have a think about how you could fix the problem that you encounter before replotting.)\n\nWhich country (or countries) has/have recorded the highest number of first ascents?\n\n\n\nTo get rid of the missing values in the data frame that your response to a. likely produced, use filter(!is.na(first_ascent_country)) in addition to the other computations that you undertook. Save the resulting data frame as a new object.\nUse your newly created data frame from b to visualise the number of first ascents per country for all countries with at least 10 first ascents. Do this using a column graph.\nTry flipping your column graph from c to a horizontal layout by switching what you put on the x and y axes.\nOne final modification: you can sort the columns to be ordered from high to low (for horizontal bars) by using reorder(first_ascent_country,n). Try plugging this into your y-axis aesthetic! If you want the reverse order, use -n instead."
  },
  {
    "objectID": "code/session4_himalayan_expeditions.html#expeditions",
    "href": "code/session4_himalayan_expeditions.html#expeditions",
    "title": "Week 4 exercises: Himalayan expeditions",
    "section": "Expeditions",
    "text": "Expeditions\nLet’s now look more closely at expeditions by using the expeditions data.\n\nHow deadly are individual peaks?\nThe columns member_deaths and hired_staff_deaths encode the number of deaths (if any) per expedition.\n\n\nTo look at how deadly individual peaks are, first create a new column which encodes the total number of deaths per expedition, then compute a summary statistic for the overall number of deaths per mountain. (Hint: there is a function called sum() that you can apply in the same way as mean(), sd() etc.). Sort in descending order of deaths and save as a new object. Which mountain is the deadliest according to your calculations?\n\n\n\nUse the new data frame created in a. to plot a horizontal column graph of the top 10 deadly mountains. As for question 5, sort the columns so that the deadliest mountain is at the top.\n\n\n\nWhich season has the highest likelihood of success? (optional)\n\nUse a boxplot to compare the highpoint reached by expeditions per season. Filter out the “unhelpful” values (you will know which ones I mean when you create the basic plot). Note that you can use filter() to only keep rows that are not equal to a particular value by using != rather than ==, so to eliminate the value “red” from a column called “colour”, for example, you could use filter(colour != \"red\"). Based on this graph, which season would you choose if you were opting for a Himalayan climbing expedition?\n\nExamine the top reasons for expedition termination by looking at the termination_reason column. (Hint: count will be very useful here …)\n\n\n\nDrawing on your answer to a, isolate the number of expeditions that were terminated because they succeeded in climbing the main peak and count how many of these there were per season and year. (Consider restricting the range of years that you look at to make the graph a bit clearer.) What patterns can you see?"
  },
  {
    "objectID": "licence.html",
    "href": "licence.html",
    "title": "Licence & Acknowledgements",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution Share Alike 4.0 International licence."
  },
  {
    "objectID": "licence.html#licence",
    "href": "licence.html#licence",
    "title": "Licence & Acknowledgements",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution Share Alike 4.0 International licence."
  },
  {
    "objectID": "licence.html#acknowledgements",
    "href": "licence.html#acknowledgements",
    "title": "Licence & Acknowledgements",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nSome materials are adapted from:\n\nData Science in a Box by Mine Çetinkaya-Rundel (github repo) under a Creative Commons Attribution Share Alike 4.0 International licence\na blogpost by Cédric Scherer under a Creative Commons Attribution 4.0 International licence.\n\nOthers draw on R for Data Science (2nd ed.) by Hadley Wickham, Mine Çetinkaya-Rundel and Garrett Grolemund.\nSee individual files for details."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the course",
    "section": "",
    "text": "This course will allow students to develop critical skills in analysing and drawing inferences from data using contemporary open-source computational tools. It will further introduce students to principles of open and reproducible science and thereby the ethical handling of data. These skills are crucial for quantitative research across a wide range of disciplines. They are also highly transferable across different domains and types of data, thus offering students a foundation for lifelong learning and problem solving, as well as potential applications in a range of different professions.\nYou will be introduced to coding in R, an open-source programming language for statistical computing, during this workshop. After introducing basic concepts of data exploration and visualisation within a reproducible workflow, the course will touch on more advanced aspects of data “wrangling” including working with text.\nTextbook: Wickham, Çetinkaya-Rundel, and Grolemund (2023) – freely available online here\nPrerequisites: None. Please bring a laptop.\n\n\n\n\nReferences\n\nWickham, Hadley, Mina Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. 2nd ed. O’Reilly Media, Inc. https://www.oreilly.com/library/view/r-for-data/9781492097396/."
  }
]