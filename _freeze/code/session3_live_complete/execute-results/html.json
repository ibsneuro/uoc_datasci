{
  "hash": "3d37b7d43edcabf32aa8d10971deb66f",
  "result": {
    "markdown": "---\ntitle: \"Data science session 3\"\nauthor: \"Ina\"\ndate: today\ndate-format: long\nformat: \n  html:\n    self-contained: true\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(gapminder)\n```\n:::\n\n\n## Discussion of week 2 exercises\n\n### Select\n\nSelect allows us to select particular columns. Use a minus sign to deselect columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  select(species,sex,island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 3\n   species sex    island   \n   <fct>   <fct>  <fct>    \n 1 Adelie  male   Torgersen\n 2 Adelie  female Torgersen\n 3 Adelie  female Torgersen\n 4 Adelie  <NA>   Torgersen\n 5 Adelie  female Torgersen\n 6 Adelie  male   Torgersen\n 7 Adelie  female Torgersen\n 8 Adelie  male   Torgersen\n 9 Adelie  <NA>   Torgersen\n10 Adelie  <NA>   Torgersen\n# ℹ 334 more rows\n```\n:::\n\n```{.r .cell-code}\npenguins |> \n  select(-year)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 7\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 1 more variable: sex <fct>\n```\n:::\n:::\n\n\n### Mutate\n\nMutate creates new columns, most typically based on existing ones.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  mutate(body_mass_kg = body_mass_g/1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex <fct>, year <int>, body_mass_kg <dbl>\n```\n:::\n:::\n\n\n### Size aesthetic\n\nThe size aesthetic maps a variable onto different sizes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g, \n             size = bill_length_mm)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nUse of size not as an aesthetic but to change the size of all points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(size = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\nSimilar use of colour not as an aesthetic but to set a uniform colour:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(colour = \"steelblue\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nAesthetics can also be set just for individual geoms, as below. In this case, they will apply only to the geom in question, not to the entire plot (as when they are specified directly as an argument of `ggplot()`). We will return to this when we look at combining different geoms later in the course.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(colour = species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## R Basics\n\nCreate new objects with the assignment operator `<-` \n\n::: {.cell}\n\n```{.r .cell-code}\na <-  1 + 2\nb <-  3 + 4\nc <- \"a text object\"\n```\n:::\n\n\nWhat you can do with an object depends on its type, e.g. basic arithmetic with numeric objects only\n\n\n::: {.cell}\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n# can't add b and c because c is a string\n# b + c\n```\n:::\n\n\nTo see the result of a computation that creates a new object, either type the name of the object to inspect it or enclose the operation in parentheses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(d <- a - b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -4\n```\n:::\n:::\n\n\nExample of a more complex object name\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthis_is_a_really_long_name <- 2.5\n\nthis_is_too <-  3.5\n```\n:::\n\n\nExample of a function: `seq()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nseq(1,100, by = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1 11 21 31 41 51 61 71 81 91\n```\n:::\n:::\n\n\nBe careful with brackets and quotation marks\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# x <- \"hello world\n\n# seq(1,10\n```\n:::\n\n\n## A little more on data manipulation\n\nCreate new objects from the penguins data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadelies <- penguins |> \n  filter(species == \"Adelie\")\n\nadelies\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 152 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n### Additional ways to summarise\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  summarise(median_body_mass = median(body_mass_g, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  median_body_mass\n             <dbl>\n1             4050\n```\n:::\n:::\n\n\nOther summary functions: `median()`, `min()`, `max()`\n\nTo look at groups use `group_by()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |> \n  summarise(median_body_mass = median(body_mass_g, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   median_body_mass\n  <fct>                <dbl>\n1 Adelie                3700\n2 Chinstrap             3700\n3 Gentoo                5000\n```\n:::\n:::\n\n\nTo look at the number of observations in a group use `count()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n\n```{.r .cell-code}\npenguins |> \n  count(species,island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n```\n:::\n:::\n\n\n### Additional ways to inspect data\n\nThe easiest way to inspect a data set is to type its name\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nThe functions `head()` and `tail()` display the first few and last few rows, respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\nhead(penguins, n=15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n11 Adelie  Torgersen           37.8          17.1               186        3300\n12 Adelie  Torgersen           37.8          17.3               180        3700\n13 Adelie  Torgersen           41.1          17.6               182        3200\n14 Adelie  Torgersen           38.6          21.2               191        3800\n15 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n\n```{.r .cell-code}\ntail(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n1 Chinstrap Dream            45.7          17                 195        3650\n2 Chinstrap Dream            55.8          19.8               207        4000\n3 Chinstrap Dream            43.5          18.1               202        3400\n4 Chinstrap Dream            49.6          18.2               193        3775\n5 Chinstrap Dream            50.8          19                 210        4100\n6 Chinstrap Dream            50.2          18.7               198        3775\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n`glimpse()` shows the columns in a horizontal layout\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n```\n:::\n:::\n\n\n\n## Plotting \n\n### Scatterplots for two continuous variables\n\nScatterplot example, which also shows how to add title and axis labels. Adding a meaningful title and axis labels makes your plot more informative and readable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point() +\n  labs(\n    title = \"Body mass as a function of flipper length\",\n    x = \"Flipper length (mm)\",\n    y = \"Body mass (g)\"\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### Plotting a categorical predictor of a continuous variable\n\nWhat about species as a predictor of body mass?\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n`geom_jitter()` produces a better result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_jitter()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### Bar / column graphs to plot quantities\n\nAlternative approach: plot mean body mass by species using a bar / column graph with `geom_col()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |> \n  summarise(mean_body_mass = mean(body_mass_g, na.rm=TRUE)) |> \n  ggplot(aes(x = species, y = mean_body_mass)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nIt is crucial to summarise first in order to only have one value per species, otherwise the plot won't show what you think:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_col()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`position_stack()`).\n```\n:::\n\n::: {.cell-output-display}\n![](session3_live_complete_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\nNote that there is also a `geom_bar()`. Have a look at the documentation: what is the difference between `geom_col()` and `geom_bar()`?\n\n**The content below was not discussed during the week 3 workshop due to time constraints. It will be covered next week.**\n\n### Line graphs to plot changes over time\n\nLine graph to plot the number of sightings per year\nWe first need to count the number of sightings\n\n\n::: {.cell}\n\n:::\n\n\nAdding groups, e.g. to look at the number of sightings per year for each species:\n\n\n::: {.cell}\n\n:::\n\n\n### Histograms to examine distributions\n\nUse a histogram to look at a distribution (e.g. of bill depth).\n\n\n::: {.cell}\n\n:::\n\n\nPair a histogram with facets to look at groups:\n\n\n::: {.cell}\n\n:::\n\n\n### Boxplots to examine distributions\n\n- Line = median\n- Lower edge of box = 1st quartile\n- Upper edge of box = 3rd quartile\n- Whiskers extend to largest / smallest value, maximally 1.5 interquartile ranges from edge of box\n- Data points beyond the whiskers are deemed outliers and plotted individually\n\n\n::: {.cell}\n\n:::\n\n\nAdd colour fill:\n\n\n::: {.cell}\n\n:::\n\n\n## Gapminder data\n\n- How has life expectancy in Australia changed over time?\n- What was the relationship between life expectancy and how wealthy a country is (gdpPercap) in 1952? In 2007?\n- How did the mean life expectancy per continent change over time?\n- Which continent had the highest variability in population across countries? Pick two years of your choice to examine.\n",
    "supporting": [
      "session3_live_complete_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}