{
  "hash": "bc63a9159ad3a8909638e63a883010db",
  "result": {
    "markdown": "---\ntitle: \"Session 9 live coding\"\nauthor: \"Ina\"\nformat: \n  html:\n    self-contained: true\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(nycflights13)\n```\n:::\n\n\n## Missing values\n\nHow can you go about identifying missing values in your data? A few things you might try ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n```\n:::\n\n```{.r .cell-code}\nmin(penguins$bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\npenguins |> \n  filter(bill_length_mm == NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 0 × 8\n# ℹ 8 variables: species <fct>, island <fct>, bill_length_mm <dbl>,\n#   bill_depth_mm <dbl>, flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n#   year <int>\n```\n:::\n:::\n\nUse `is.na()` to identify missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(is.na(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen             NA            NA                NA          NA\n2 Gentoo  Biscoe                NA            NA                NA          NA\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nYou can use `complete.cases()` to identify rows without missing values.\nSee slides for a bit more informatio non why missing values require special treatment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[complete.cases(penguins),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 323 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nIf you want to select rows that are incomplete (i.e. contain missing values), add an ! as a negation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins[!complete.cases(penguins),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           NA            NA                  NA          NA\n 2 Adelie  Torgersen           34.1          18.1               193        3475\n 3 Adelie  Torgersen           42            20.2               190        4250\n 4 Adelie  Torgersen           37.8          17.1               186        3300\n 5 Adelie  Torgersen           37.8          17.3               180        3700\n 6 Adelie  Dream               37.5          18.9               179        2975\n 7 Gentoo  Biscoe              44.5          14.3               216        4100\n 8 Gentoo  Biscoe              46.2          14.4               214        4650\n 9 Gentoo  Biscoe              47.3          13.8               216        4725\n10 Gentoo  Biscoe              44.5          15.7               217        4875\n11 Gentoo  Biscoe              NA            NA                  NA          NA\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nAnother use of ! as a \"negation\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  filter(species != \"Adelie\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 192 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 182 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nUsing `anti_join()` to find implicit missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n:::\n\n```{.r .cell-code}\nflights |> \n  left_join(airports, by = c(\"dest\" = \"faa\")) |> \n  select(year:dep_time,dest,name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n    year month   day dep_time dest  name                           \n   <int> <int> <int>    <int> <chr> <chr>                          \n 1  2013     1     1      517 IAH   George Bush Intercontinental   \n 2  2013     1     1      533 IAH   George Bush Intercontinental   \n 3  2013     1     1      542 MIA   Miami Intl                     \n 4  2013     1     1      544 BQN   <NA>                           \n 5  2013     1     1      554 ATL   Hartsfield Jackson Atlanta Intl\n 6  2013     1     1      554 ORD   Chicago Ohare Intl             \n 7  2013     1     1      555 FLL   Fort Lauderdale Hollywood Intl \n 8  2013     1     1      557 IAD   Washington Dulles Intl         \n 9  2013     1     1      557 MCO   Orlando Intl                   \n10  2013     1     1      558 ORD   Chicago Ohare Intl             \n# ℹ 336,766 more rows\n```\n:::\n\n```{.r .cell-code}\nflights |> \n  distinct(dest) |> \n  anti_join(airports, by = c(\"dest\" = \"faa\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 1\n  dest \n  <chr>\n1 BQN  \n2 SJU  \n3 STT  \n4 PSE  \n```\n:::\n\n```{.r .cell-code}\nflights |> \n  distinct(faa = dest) |> \n  anti_join(airports)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(faa)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 1\n  faa  \n  <chr>\n1 BQN  \n2 SJU  \n3 STT  \n4 PSE  \n```\n:::\n:::\n\n\nUse `drop_na()` to drop all rows with any missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  drop_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 333 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 323 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\nUse `drop_na()` with a particular column to restrict NA drops to that column only.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins |> \n  drop_na(bill_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 342 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           34.1          18.1               193        3475\n 9 Adelie  Torgersen           42            20.2               190        4250\n10 Adelie  Torgersen           37.8          17.1               186        3300\n# ℹ 332 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n## Recode values\n\nLet's have another look at the `members` data from from the Himalayan Peaks data that we used for the session 4 exercises.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmembers <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-22/members.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 76519 Columns: 21\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): expedition_id, member_id, peak_id, peak_name, season, sex, citizen...\ndbl  (5): year, age, highpoint_metres, death_height_metres, injury_height_me...\nlgl  (6): hired, success, solo, oxygen_used, died, injured\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nglimpse(members)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 76,519\nColumns: 21\n$ expedition_id        <chr> \"AMAD78301\", \"AMAD78301\", \"AMAD78301\", \"AMAD78301…\n$ member_id            <chr> \"AMAD78301-01\", \"AMAD78301-02\", \"AMAD78301-03\", \"…\n$ peak_id              <chr> \"AMAD\", \"AMAD\", \"AMAD\", \"AMAD\", \"AMAD\", \"AMAD\", \"…\n$ peak_name            <chr> \"Ama Dablam\", \"Ama Dablam\", \"Ama Dablam\", \"Ama Da…\n$ year                 <dbl> 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1978, 1…\n$ season               <chr> \"Autumn\", \"Autumn\", \"Autumn\", \"Autumn\", \"Autumn\",…\n$ sex                  <chr> \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\", \"M\",…\n$ age                  <dbl> 40, 41, 27, 40, 34, 25, 41, 29, 35, 37, 23, 44, 2…\n$ citizenship          <chr> \"France\", \"France\", \"France\", \"France\", \"France\",…\n$ expedition_role      <chr> \"Leader\", \"Deputy Leader\", \"Climber\", \"Exp Doctor…\n$ hired                <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ highpoint_metres     <dbl> NA, 6000, NA, 6000, NA, 6000, 6000, 6000, NA, 681…\n$ success              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ solo                 <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ oxygen_used          <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ died                 <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ death_cause          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ death_height_metres  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ injured              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, …\n$ injury_type          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ injury_height_metres <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n```\n:::\n:::\n\n\nFocus on `death_cause` for the purposes of this example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmembers |> \n  count(death_cause)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 2\n   death_cause                     n\n   <chr>                       <int>\n 1 AMS                           102\n 2 Avalanche                     369\n 3 Crevasse                       27\n 4 Disappearance (unexplained)    49\n 5 Exhaustion                     41\n 6 Exposure / frostbite           42\n 7 Fall                          331\n 8 Falling rock / ice             26\n 9 Icefall collapse               16\n10 Illness (non-AMS)              60\n11 Other                          33\n12 Unknown                        10\n13 <NA>                        75413\n```\n:::\n:::\n\n\nWhat if we wanted to reduce these different causes of death to just a few main categories?\nUse `case_when()` inside `mutate()` to create a new variable from recategorised cases of an existing one. \nThe syntax is `condition ~ new value` and each statement is evaluated in turn.\n`TRUE ~ \"other\"` captures all remaining cases, since `TRUE` is always true; otherwise, any uncategorised cases will be `NA`s.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmembers |> \n  # drop missing values first\n  drop_na(death_cause) |> \n  mutate(death_cause_grouped = case_when(\n    death_cause == \"Fall\" ~ \"fall\",\n    death_cause == \"Avalanche\" ~ \"snow\",\n    TRUE ~ \"other\"\n  )) |> \n  select(death_cause, death_cause_grouped) |> \n  count(death_cause_grouped)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  death_cause_grouped     n\n  <chr>               <int>\n1 fall                  331\n2 other                 406\n3 snow                  369\n```\n:::\n:::\n\n\nUse `cut()` (from base R) to recategorise a numeric variable as categorical.\nHere, the `breaks()` argument specifies the break points between each category; `labels()` allows you to provide labels for each category.\nThe functions `cut_interval()`, `cut_number()` and `cut_width()` (from the {ggplot2} package, loaded as part of the tidyverse) offer convenient ways of discretising into groups of equal range, equal number of observations, or a set width.\nSee the documentation for these functions for more information; one example using `cut_interval()` is provided below -- note that you could also use `labels()` here as in the example for `cut()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmembers |> \n  mutate(age_group = cut(age, breaks = c(0,18,40,60,100),\n                         labels = c(\"minor\",\"young\",\"middle-aged\",\n                                    \"older\"))) |> \n  select(peak_id:age,age_group) |> \n  count(age_group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  age_group       n\n  <fct>       <int>\n1 minor         277\n2 young       47757\n3 middle-aged 22988\n4 older        2000\n5 <NA>         3497\n```\n:::\n\n```{.r .cell-code}\nmembers |> \n  mutate(age_group = cut_interval(age, n = 3)) |> \n  select(peak_id:age,age_group) |> \n  count(age_group)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  age_group     n\n  <fct>     <int>\n1 [7,33]    30303\n2 (33,59]   40312\n3 (59,85]    2407\n4 <NA>       3497\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}