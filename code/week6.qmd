---
title: "Week 6 live coding"
format: 
  html:
    self-contained: true
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)

```

## Characteristics of tidy data

Inspect tables 1--3.

```{r}
table1

table2

table3
```

Inspect tables 4a and 4b.

```{r}
table4a

table4b
```


## Pivoting to longer

```{r}
table4a |> 
  pivot_longer(c(`1999`,`2000`),
               names_to = "year",
               values_to = "cases")

```

Here, the `c()` operator concatenates objects into a vector, e.g.

```{r}
x <- c("apples", "oranges", "bananas")

x

# You can select individual objects from the vector through their index
x[1]
```

Alternative syntax for picking out columns that are contiguous:

```{r}
table4a |> 
  pivot_longer(`1999`:`2000`,
               names_to = "year",
               values_to = "cases")

```

::: {.callout-tip collapse=FALSE}
## The difference between `c()` and `:` 
An example to illustrate the difference between using `c()` and `:` to select columns. Use `c()` to select any two columns in the penguins data; use `:` to select columns that are adjacent to one another by specifying the first and last columns

```{r}
library(palmerpenguins)

penguins

penguins |> 
  select(c(species, flipper_length_mm))

penguins |> 
  select(species:flipper_length_mm)
```

:::

Pivoting `table4b` as another exercise:

```{r}
table4b |> 
  pivot_longer(`1999`:`2000`,
               names_to = "year",
               values_to = "population")

```

## Pivoting to wider

```{r}
table2 |> 
  pivot_wider(names_from = "type",
              values_from = "count")

```

## Separating columns

```{r}
table3 |> 
  separate(col = rate, into = c("cases","population"))

```

Set convert to TRUE to ensure that columns are of the correct type:

```{r}
table3 |> 
  separate(col = rate, into = c("cases","population"), convert = TRUE)

```






